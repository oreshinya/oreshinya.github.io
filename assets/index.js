// Generated by purs bundle 0.13.2
var PS = {};
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];                
  var Discard = function (discard) {
      this.discard = discard;
  };
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];                    
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modify'"] = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify = function (f) {
      return $foreign["modify'"](function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify"] = modify;
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.Rec.Class"] = $PS["Control.Monad.Rec.Class"] || {};
  var exports = $PS["Control.Monad.Rec.Class"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  }; 
  var monadRecEffect = new MonadRec(function () {
      return Effect.monadEffect;
  }, function (f) {
      return function (a) {
          var fromDone = function (v) {
              if (v instanceof Done) {
                  return v.value0;
              };
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 111, column 30 - line 111, column 44): " + [ v.constructor.name ]);
          };
          return function __do() {
              var v = Control_Bind.bindFlipped(Effect.bindEffect)(Effect_Ref["new"])(f(a))();
              (function () {
                  while (!(function __do() {
                      var v1 = Effect_Ref.read(v)();
                      if (v1 instanceof Loop) {
                          var v2 = f(v1.value0)();
                          var v3 = Effect_Ref.write(v2)(v)();
                          return false;
                      };
                      if (v1 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 102, column 22 - line 107, column 28): " + [ v1.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Effect.functorEffect)(fromDone)(Effect_Ref.read(v))();
          };
      };
  });
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEffect"] = monadRecEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];                           
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];          
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 1 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });                                                                                                     
  var fromRight = function (dictPartial) {
      return function (v) {
          if (v instanceof Right) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Either (line 261, column 1 - line 261, column 52): " + [ v.constructor.name ]);
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 48, column 36): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["fromRight"] = fromRight;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Exists"] = $PS["Data.Exists"] || {};
  var exports = $PS["Data.Exists"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.Free.Trans"] = $PS["Control.Monad.Free.Trans"] || {};
  var exports = $PS["Control.Monad.Free.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Exists = $PS["Data.Exists"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];                      
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (ma) {
              return new FreeT(function (v) {
                  return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
              });
          };
      });
  };                       
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  if (v instanceof FreeT) {
                      return new FreeT(function (v1) {
                          return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                      });
                  };
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)((function () {
                              var $104 = Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f);
                              return function ($105) {
                                  return $104(v1.value1($105));
                              };
                          })());
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 57, column 1 - line 59, column 71): " + [ f.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var bimapFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (nf) {
              return function (nm) {
                  return function (v) {
                      if (v instanceof Bind) {
                          return Data_Exists.runExists(function (v1) {
                              return bound((function () {
                                  var $106 = bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm);
                                  return function ($107) {
                                      return $106(v1.value0($107));
                                  };
                              })())((function () {
                                  var $108 = bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm);
                                  return function ($109) {
                                      return $108(v1.value1($109));
                                  };
                              })());
                          })(v.value0);
                      };
                      if (v instanceof FreeT) {
                          return new FreeT(function (v1) {
                              return Data_Functor.map(dictFunctor1)(Data_Functor.map(Data_Either.functorEither)((function () {
                                  var $110 = Data_Functor.map(dictFunctor)(bimapFreeT(dictFunctor)(dictFunctor1)(nf)(nm));
                                  return function ($111) {
                                      return nf($110($111));
                                  };
                              })()))(nm(v.value0(Data_Unit.unit)));
                          });
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 118, column 1 - line 118, column 109): " + [ nf.constructor.name, nm.constructor.name, v.constructor.name ]);
                  };
              };
          };
      };
  };
  var hoistFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return bimapFreeT(dictFunctor)(dictFunctor1)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeFreeT(dictFunctor)(dictMonad);
          }, function () {
              return bindFreeT(dictFunctor)(dictMonad);
          });
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (v) {
              return function (f) {
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function (x) {
                              return bound(function (v2) {
                                  return v1.value1(x);
                              })(f);
                          });
                      })(v.value0);
                  };
                  return bound(function (v1) {
                      return v;
                  })(f);
              };
          });
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Apply.Apply(function () {
              return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
          }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Applicative.Applicative(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (a) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
              });
          });
      };
  };
  var liftFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return function (fa) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
              });
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var v2 = v1.value0(Data_Unit.unit);
                      if (v2 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                  })(v3.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 52, column 20 - line 54, column 67): " + [ v3.constructor.name ]);
                          });
                      };
                      if (v2 instanceof Bind) {
                          return Data_Exists.runExists(function (v3) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                              })));
                          })(v2.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 50, column 5 - line 55, column 98): " + [ v2.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 47, column 3 - line 47, column 75): " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 126, column 3 - line 126, column 63): " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadFreeT(dictFunctor)(dictMonad);
          }, function (f) {
              var go = function (s) {
                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                      if (v instanceof Control_Monad_Rec_Class.Loop) {
                          return go(v.value0);
                      };
                      if (v instanceof Control_Monad_Rec_Class.Done) {
                          return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 80, column 15 - line 82, column 25): " + [ v.constructor.name ]);
                  });
              };
              return go;
          });
      };
  };
  exports["liftFreeT"] = liftFreeT;
  exports["hoistFreeT"] = hoistFreeT;
  exports["bimapFreeT"] = bimapFreeT;
  exports["resume"] = resume;
  exports["runFreeT"] = runFreeT;
  exports["functorFreeT"] = functorFreeT;
  exports["applyFreeT"] = applyFreeT;
  exports["applicativeFreeT"] = applicativeFreeT;
  exports["bindFreeT"] = bindFreeT;
  exports["monadFreeT"] = monadFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];       
  var MonadAsk = function (Monad0, ask) {
      this.Monad0 = Monad0;
      this.ask = ask;
  };
  var MonadReader = function (MonadAsk0, local) {
      this.MonadAsk0 = MonadAsk0;
      this.local = local;
  };                                                                           
  var local = function (dict) {
      return dict.local;
  };
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
  exports["local"] = local;
  exports["MonadAsk"] = MonadAsk;
  exports["MonadReader"] = MonadReader;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };
  var monadEffectEffect = new MonadEffect(function () {
      return Effect.monadEffect;
  }, Control_Category.identity(Control_Category.categoryFn));
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.Reader.Trans"] = $PS["Control.Monad.Reader.Trans"] || {};
  var exports = $PS["Control.Monad.Reader.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect_Class = $PS["Effect.Class"];                
  var ReaderT = function (x) {
      return x;
  };
  var withReaderT = function (f) {
      return function (v) {
          return function ($66) {
              return v(f($66));
          };
      };
  };
  var runReaderT = function (v) {
      return v;
  };          
  var monadTransReaderT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($67) {
          return ReaderT(Data_Function["const"]($67));
      };
  });
  var mapReaderT = function (f) {
      return function (v) {
          return function ($68) {
              return f(v($68));
          };
      };
  };
  var functorReaderT = function (dictFunctor) {
      return new Data_Functor.Functor((function () {
          var $69 = Data_Functor.map(dictFunctor);
          return function ($70) {
              return mapReaderT($69($70));
          };
      })());
  };
  var applyReaderT = function (dictApply) {
      return new Control_Apply.Apply(function () {
          return functorReaderT(dictApply.Functor0());
      }, function (v) {
          return function (v1) {
              return function (r) {
                  return Control_Apply.apply(dictApply)(v(r))(v1(r));
              };
          };
      });
  };
  var bindReaderT = function (dictBind) {
      return new Control_Bind.Bind(function () {
          return applyReaderT(dictBind.Apply0());
      }, function (v) {
          return function (k) {
              return function (r) {
                  return Control_Bind.bind(dictBind)(v(r))(function (a) {
                      var v1 = k(a);
                      return v1(r);
                  });
              };
          };
      });
  };
  var applicativeReaderT = function (dictApplicative) {
      return new Control_Applicative.Applicative(function () {
          return applyReaderT(dictApplicative.Apply0());
      }, (function () {
          var $74 = Control_Applicative.pure(dictApplicative);
          return function ($75) {
              return ReaderT(Data_Function["const"]($74($75)));
          };
      })());
  };
  var monadReaderT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeReaderT(dictMonad.Applicative0());
      }, function () {
          return bindReaderT(dictMonad.Bind1());
      });
  };
  var monadAskReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadAsk(function () {
          return monadReaderT(dictMonad);
      }, Control_Applicative.pure(dictMonad.Applicative0()));
  };
  var monadReaderReaderT = function (dictMonad) {
      return new Control_Monad_Reader_Class.MonadReader(function () {
          return monadAskReaderT(dictMonad);
      }, withReaderT);
  };
  var monadEffectReader = function (dictMonadEffect) {
      return new Effect_Class.MonadEffect(function () {
          return monadReaderT(dictMonadEffect.Monad0());
      }, (function () {
          var $77 = Control_Monad_Trans_Class.lift(monadTransReaderT)(dictMonadEffect.Monad0());
          var $78 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($79) {
              return $77($78($79));
          };
      })());
  };
  var monadRecReaderT = function (dictMonadRec) {
      return new Control_Monad_Rec_Class.MonadRec(function () {
          return monadReaderT(dictMonadRec.Monad0());
      }, function (k) {
          return function (a) {
              var k$prime = function (r) {
                  return function (a$prime) {
                      var v = k(a$prime);
                      return Control_Bind.bindFlipped((dictMonadRec.Monad0()).Bind1())(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0()))(v(r));
                  };
              };
              return function (r) {
                  return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(k$prime(r))(a);
              };
          };
      });
  };
  exports["ReaderT"] = ReaderT;
  exports["runReaderT"] = runReaderT;
  exports["withReaderT"] = withReaderT;
  exports["mapReaderT"] = mapReaderT;
  exports["functorReaderT"] = functorReaderT;
  exports["applyReaderT"] = applyReaderT;
  exports["applicativeReaderT"] = applicativeReaderT;
  exports["bindReaderT"] = bindReaderT;
  exports["monadReaderT"] = monadReaderT;
  exports["monadTransReaderT"] = monadTransReaderT;
  exports["monadEffectReader"] = monadEffectReader;
  exports["monadAskReaderT"] = monadAskReaderT;
  exports["monadReaderReaderT"] = monadReaderReaderT;
  exports["monadRecReaderT"] = monadRecReaderT;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;   
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          var $96 = Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1));
                          var $97 = Data_Functor.map(dictFunctor)(wrap(dictNewtype));
                          return function ($98) {
                              return $96(f($97($98)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)((function () {
                  var $197 = Control_Apply.applySecond(dictApplicative.Apply0());
                  return function ($198) {
                      return $197(f($198));
                  };
              })())(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var elem = function (dictFoldable) {
      return function (dictEq) {
          var $204 = any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean);
          var $205 = Data_Eq.eq(dictEq);
          return function ($206) {
              return $204($205($206));
          };
      };
  };
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              var $207 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
              var $208 = elem(dictFoldable)(dictEq)(x);
              return function ($209) {
                  return $207($208($209));
              };
          };
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["sequence_"] = sequence_;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Control.Safely"] = $PS["Control.Safely"] || {};
  var exports = $PS["Control.Safely"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Free_Trans = $PS["Control.Monad.Free.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var safely = function (dictMonadRec) {
      return function (f) {
          var lower = function (dictMonadRec1) {
              return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec1)((function () {
                  var $19 = Control_Applicative.pure((dictMonadRec1.Monad0()).Applicative0());
                  var $20 = Data_Newtype.unwrap(Data_Identity.newtypeIdentity);
                  return function ($21) {
                      return $19($20($21));
                  };
              })());
          };
          return lower(dictMonadRec)(f(Control_Monad_Free_Trans.monadRecFreeT(Data_Identity.functorIdentity)(dictMonadRec.Monad0()))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Data_Identity.functorIdentity))(dictMonadRec.Monad0()))(lower(dictMonadRec)));
      };
  };
  var traverse_ = function (dictFoldable) {
      return function (dictMonadRec) {
          return function (f) {
              return function (xs) {
                  return safely(dictMonadRec)(function (dictMonadRec1) {
                      return function (lift) {
                          return function (v) {
                              return Data_Foldable.traverse_((dictMonadRec1.Monad0()).Applicative0())(dictFoldable)(function ($22) {
                                  return lift(f($22));
                              })(xs);
                          };
                      };
                  });
              };
          };
      };
  };
  var for_ = function (dictFoldable) {
      return function (dictMonadRec) {
          return Data_Function.flip(traverse_(dictFoldable)(dictMonadRec));
      };
  };
  exports["safely"] = safely;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
})(PS);
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                                 

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  exports.snoc = function (l) {
    return function (e) {
      var l1 = l.slice();
      l1.push(e);
      return l1;
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.take = function (n) {
    return function (l) {
      return n < 1 ? [] : l.slice(0, n);
    };
  };

  //------------------------------------------------------------------------------
  // Partial ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.unsafeIndexImpl = function (xs) {
    return function (n) {
      return xs[n];
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  "use strict";

  exports.empty = function () {
    return [];
  };

  exports.pushAll = function (as) {
    return function (xs) {
      return function () {
        return xs.push.apply(xs, as);
      };
    };
  };
})(PS["Data.Array.ST"] = PS["Data.Array.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Array.ST"] = $PS["Data.Array.ST"] || {};
  var exports = $PS["Data.Array.ST"];
  var $foreign = $PS["Data.Array.ST"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var unsafeFreeze = (function () {
      var $13 = Control_Applicative.pure(Control_Monad_ST_Internal.applicativeST);
      return function ($14) {
          return $13($14);
      };
  })();
  var push = function (a) {
      return $foreign.pushAll([ a ]);
  };
  exports["push"] = push;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["empty"] = $foreign.empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];          
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                         
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  };
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  };
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array_ST = $PS["Data.Array.ST"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                          
  var unsafeIndex = function (dictPartial) {
      return $foreign.unsafeIndexImpl;
  }; 
  var toUnfoldable = function (dictUnfoldable) {
      return function (xs) {
          var len = $foreign.length(xs);
          var f = function (i) {
              if (i < len) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(unsafeIndex()(xs)(i), i + 1 | 0));
              };
              if (Data_Boolean.otherwise) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Data.Array (line 143, column 3 - line 145, column 26): " + [ i.constructor.name ]);
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(f)(0);
      };
  };
  var nubByEq = function (eq) {
      return function (xs) {
          return (function __do() {
              var v = Data_Array_ST.empty();
              Control_Monad_ST_Internal.foreach(xs)(function (x) {
                  return function __do() {
                      var v1 = Data_Functor.map(Control_Monad_ST_Internal.functorST)((function () {
                          var $113 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
                          var $114 = Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v1) {
                              return eq(v1)(x);
                          });
                          return function ($115) {
                              return $113($114($115));
                          };
                      })())(Data_Array_ST.unsafeFreeze(v))();
                      return Control_Applicative.when(Control_Monad_ST_Internal.applicativeST)(v1)(Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Data_Array_ST.push(x)(v)))();
                  };
              })();
              return Data_Array_ST.unsafeFreeze(v)();
          })();
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign["_deleteAt"](Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(v2)(function (i) {
                  return Data_Maybe.fromJust()(deleteAt(i)(v2));
              })(findIndex(v(v1))(v2));
          };
      };
  };
  var unionBy = function (eq) {
      return function (xs) {
          return function (ys) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(xs)(Data_Foldable.foldl(Data_Foldable.foldableArray)(Data_Function.flip(deleteBy(eq)))(nubByEq(eq)(ys))(xs));
          };
      };
  };
  var union = function (dictEq) {
      return unionBy(Data_Eq.eq(dictEq));
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["index"] = index;
  exports["findIndex"] = findIndex;
  exports["deleteAt"] = deleteAt;
  exports["nubByEq"] = nubByEq;
  exports["union"] = union;
  exports["unionBy"] = unionBy;
  exports["deleteBy"] = deleteBy;
  exports["unsafeIndex"] = unsafeIndex;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["snoc"] = $foreign.snoc;
  exports["filter"] = $foreign.filter;
  exports["take"] = $foreign.take;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;   
  exports.ordCharImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];              
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                                                                                 
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare = function (dict) {
      return dict.compare;
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["ordInt"] = ordInt;
  exports["ordChar"] = ordChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Char"] = $PS["Data.Char"] || {};
  var exports = $PS["Data.Char"];
  var Data_Enum = $PS["Data.Enum"];                
  var toCharCode = Data_Enum.fromEnum(Data_Enum.boundedEnumChar);
  exports["toCharCode"] = toCharCode;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function(exports) {
  "use strict";

  exports.toStringAs = function (radix) {
    return function (i) {
      return i.toString(radix);
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var base36 = 36;
  exports["base36"] = base36;
  exports["toStringAs"] = $foreign.toStringAs;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];                          
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                    
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  }; 
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var empty = Leaf.value;
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
})(PS);
(function(exports) {
  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
  exports["null"] = $foreign["null"];
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS);
(function(exports) {
  "use strict";

  exports.toCharArray = function (s) {
    return s.split("");
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  exports["toCharArray"] = $foreign.toCharArray;
})(PS);
(function(exports) {
  "use strict";

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.replaceAll = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(new RegExp(s1.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&"), "g"), s2); // eslint-disable-line no-useless-escape
      };
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["replaceAll"] = $foreign.replaceAll;
  exports["split"] = $foreign.split;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function(exports) {
  "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports.test = function (r) {
    return function (s) {
      var lastIndex = r.lastIndex;
      var result = r.test(s);
      r.lastIndex = lastIndex;
      return result;
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.String.Regex"] = $PS["Data.String.Regex"] || {};
  var exports = $PS["Data.String.Regex"];
  var $foreign = $PS["Data.String.Regex"];
  var Data_Either = $PS["Data.Either"];                                              
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["test"] = $foreign.test;
  exports["replace"] = $foreign.replace;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.String.Regex.Flags"] = $PS["Data.String.Regex.Flags"] || {};
  var exports = $PS["Data.String.Regex.Flags"];                      
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  var global = new RegexFlags({
      global: true,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
  exports["global"] = global;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Data.String.Regex.Unsafe"] = $PS["Data.String.Regex.Unsafe"] || {};
  var exports = $PS["Data.String.Regex.Unsafe"];
  var Data_Either = $PS["Data.Either"];
  var Data_String_Regex = $PS["Data.String.Regex"];                
  var unsafeRegex = function (s) {
      return function (f) {
          return Data_Either.fromRight()(Data_String_Regex.regex(s)(f));
      };
  };
  exports["unsafeRegex"] = unsafeRegex;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          });
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            step   = bhead(step);
            if (btail === null) {
              bhead = null;
            } else {
              bhead = btail._1;
              btail = btail._2;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];                          
  var functorAff = new Data_Functor.Functor($foreign["_map"]);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 54): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 397, column 54): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };
  var launchAff_ = (function () {
      var $49 = Data_Functor["void"](Effect.functorEffect);
      return function ($50) {
          return $49(launchAff($50));
      };
  })();
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (k) {
      var go = function (a) {
          return Control_Bind.bind(bindAff)(k(a))(function (v) {
              if (v instanceof Control_Monad_Rec_Class.Done) {
                  return Control_Applicative.pure(applicativeAff)(v.value0);
              };
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return go(v.value0);
              };
              throw new Error("Failed pattern match at Effect.Aff (line 100, column 7 - line 102, column 22): " + [ v.constructor.name ]);
          });
      };
      return go;
  });
  exports["launchAff"] = launchAff;
  exports["launchAff_"] = launchAff_;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadRecAff"] = monadRecAff;
  exports["monadEffectAff"] = monadEffectAff;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["error"] = $foreign.error;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
})(PS);
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports.size = function (m) {
    var s = 0;
    for (var k in m) {
      if (hasOwnProperty.call(m, k)) {
        ++s;
      }
    }
    return s;
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;

  exports.keys = Object.keys || toArrayWithKey(function (k) {
    return function () { return k; };
  });
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });
  var toUnfoldable = function (dictUnfoldable) {
      var $45 = Data_Array.toUnfoldable(dictUnfoldable);
      var $46 = $foreign.toArrayWithKey(Data_Tuple.Tuple.create);
      return function ($47) {
          return $45($46($47));
      };
  };                                                             
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };
  var member = Data_Function_Uncurried.runFn4($foreign["_lookup"])(false)(Data_Function["const"](true));
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var v = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v1.value0)(v1.value1)(v));
              })();
              return v;
          });
      };
  }; 
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["delete"] = $$delete;
  exports["member"] = member;
  exports["values"] = values;
  exports["thawST"] = thawST;
  exports["empty"] = $foreign.empty;
  exports["size"] = $foreign.size;
  exports["keys"] = $foreign.keys;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.VNode"] = $PS["Freedom.VNode"] || {};
  var exports = $PS["Freedom.VNode"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Ref = $PS["Effect.Ref"];
  var VNode = (function () {
      function VNode(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      VNode.create = function (value0) {
          return function (value1) {
              return new VNode(value0, value1);
          };
      };
      return VNode;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Element = (function () {
      function Element(value0) {
          this.value0 = value0;
      };
      Element.create = function (value0) {
          return new Element(value0);
      };
      return Element;
  })();
  var OperativeElement = (function () {
      function OperativeElement(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OperativeElement.create = function (value0) {
          return function (value1) {
              return new OperativeElement(value0, value1);
          };
      };
      return OperativeElement;
  })();
  var runVRender = function (v) {
      return Control_Monad_Reader_Trans.runReaderT(v);
  };                                                                                             
  var monadRecVRender = Control_Monad_Reader_Trans.monadRecReaderT(Effect_Aff.monadRecAff);
  var fromBridgeFoot = function (v) {
      return Effect_Ref.read(v);
  };
  var bridge = function (v) {
      return function (v1) {
          return Control_Bind.bind(Effect.bindEffect)(Effect_Ref.read(v))(Data_Function.flip(Effect_Ref.write)(v1));
      };
  };
  exports["Text"] = Text;
  exports["Element"] = Element;
  exports["OperativeElement"] = OperativeElement;
  exports["VNode"] = VNode;
  exports["bridge"] = bridge;
  exports["fromBridgeFoot"] = fromBridgeFoot;
  exports["runVRender"] = runVRender;
  exports["monadRecVRender"] = monadRecVRender;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Renderer.Diff"] = $PS["Freedom.Renderer.Diff"] || {};
  var exports = $PS["Freedom.Renderer.Diff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Freedom_VNode = $PS["Freedom.VNode"];                
  var Add = (function () {
      function Add() {

      };
      Add.value = new Add();
      return Add;
  })();
  var Delete = (function () {
      function Delete() {

      };
      Delete.value = new Delete();
      return Delete;
  })();
  var HasKey = function (fallbackPrefix, key) {
      this.fallbackPrefix = fallbackPrefix;
      this.key = key;
  };
  var realSourceIdx = function (currentVirtualIdx) {
      return function (x) {
          var calc = function (sourceIdx) {
              return function (v) {
                  if (v.value1 instanceof Add) {
                      var $32 = sourceIdx < v.value0;
                      if ($32) {
                          return sourceIdx;
                      };
                      return sourceIdx + 1 | 0;
                  };
                  if (v.value1 instanceof Delete) {
                      var $35 = sourceIdx < v.value0;
                      if ($35) {
                          return sourceIdx;
                      };
                      return sourceIdx - 1 | 0;
                  };
                  throw new Error("Failed pattern match at Freedom.Renderer.Diff (line 111, column 5 - line 111, column 90): " + [ sourceIdx.constructor.name, v.constructor.name ]);
              };
          };
          return Data_Foldable.foldl(Data_Foldable.foldableArray)(calc)(currentVirtualIdx)(x.realOperations);
      };
  };
  var markRealDeleting = function (realIndex) {
      return function (x) {
          return {
              currents: x.currents,
              nexts: x.nexts,
              currentStart: x.currentStart,
              currentEnd: x.currentEnd,
              nextStart: x.nextStart,
              nextEnd: x.nextEnd,
              realOperations: Data_Array.snoc(x.realOperations)(new Data_Tuple.Tuple(realIndex, Delete.value)),
              keyToIndex: x.keyToIndex
          };
      };
  };
  var markRealAdding = function (realIndex) {
      return function (x) {
          return {
              currents: x.currents,
              nexts: x.nexts,
              currentStart: x.currentStart,
              currentEnd: x.currentEnd,
              nextStart: x.nextStart,
              nextEnd: x.nextEnd,
              realOperations: Data_Array.snoc(x.realOperations)(new Data_Tuple.Tuple(realIndex, Add.value)),
              keyToIndex: x.keyToIndex
          };
      };
  };
  var markRealMove = function (from) {
      return function (to) {
          var $77 = markRealAdding(to);
          var $78 = markRealDeleting(from);
          return function ($79) {
              return $77($78($79));
          };
      };
  };
  var markProcessKey = function (k) {
      return function (x) {
          return (function (v) {
              return {
                  keyToIndex: v,
                  currentEnd: x.currentEnd,
                  currentStart: x.currentStart,
                  currents: x.currents,
                  nextEnd: x.nextEnd,
                  nextStart: x.nextStart,
                  nexts: x.nexts,
                  realOperations: x.realOperations
              };
          })(Foreign_Object["delete"](k)(x.keyToIndex));
      };
  };
  var key = function (dict) {
      return dict.key;
  };
  var initState = function (dictHasKey) {
      return function (currents) {
          return function (nexts) {
              return {
                  currents: currents,
                  nexts: nexts,
                  currentStart: 0,
                  currentEnd: Data_Array.length(currents) - 1 | 0,
                  nextStart: 0,
                  nextEnd: Data_Array.length(nexts) - 1 | 0,
                  realOperations: [  ],
                  keyToIndex: Foreign_Object.empty
              };
          };
      };
  };
  var hasKeyVNode = new HasKey(function (v) {
      if (v.value1 instanceof Freedom_VNode.Text) {
          return "text_";
      };
      if (v.value1 instanceof Freedom_VNode.Element) {
          return "element_" + (v.value1.value0.tag + "_");
      };
      if (v.value1 instanceof Freedom_VNode.OperativeElement) {
          return "oelement_" + (v.value1.value1.tag + "_");
      };
      throw new Error("Failed pattern match at Freedom.Renderer.Diff (line 27, column 1 - line 31, column 84): " + [ v.constructor.name ]);
  }, function (v) {
      return v.value0;
  });                                                                                              
  var forwardNextCursor = function (x) {
      return {
          currents: x.currents,
          nexts: x.nexts,
          currentStart: x.currentStart,
          currentEnd: x.currentEnd,
          nextStart: x.nextStart + 1 | 0,
          nextEnd: x.nextEnd,
          realOperations: x.realOperations,
          keyToIndex: x.keyToIndex
      };
  };
  var forwardCurrentCursor = function (x) {
      return {
          currents: x.currents,
          nexts: x.nexts,
          currentStart: x.currentStart + 1 | 0,
          currentEnd: x.currentEnd,
          nextStart: x.nextStart,
          nextEnd: x.nextEnd,
          realOperations: x.realOperations,
          keyToIndex: x.keyToIndex
      };
  };
  var fallbackPrefix = function (dict) {
      return dict.fallbackPrefix;
  };
  var getKey = function (dictHasKey) {
      return function (idx) {
          return function (a) {
              var fkey = fallbackPrefix(dictHasKey)(a) + Data_Show.show(Data_Show.showInt)(idx);
              var $54 = key(dictHasKey)(a) === "";
              if ($54) {
                  return fkey;
              };
              return key(dictHasKey)(a);
          };
      };
  };
  var storeKeyToIdx = function (dictHasKey) {
      return function (x) {
          return (function (v) {
              return {
                  keyToIndex: v,
                  currentEnd: x.currentEnd,
                  currentStart: x.currentStart,
                  currents: x.currents,
                  nextEnd: x.nextEnd,
                  nextStart: x.nextStart,
                  nexts: x.nexts,
                  realOperations: x.realOperations
              };
          })((function () {
              var $55 = x.currentStart > x.currentEnd;
              if ($55) {
                  return Foreign_Object.empty;
              };
              return Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Function.flip(Data_Functor.map(Data_Functor.functorArray))(Data_Array.range(x.currentStart)(x.currentEnd))(function (i) {
                  return new Data_Tuple.Tuple(getKey(dictHasKey)(i)(x["currents"][i]), i);
              }));
          })());
      };
  };
  var cursorNextStart = function (v) {
      return Data_Array.index(v.nexts)(v.nextStart);
  };
  var cursorNextEnd = function (v) {
      return Data_Array.index(v.nexts)(v.nextEnd);
  };
  var cursorCurrentStart = function (v) {
      return Data_Array.index(v.currents)(v.currentStart);
  };
  var cursorCurrentEnd = function (v) {
      return Data_Array.index(v.currents)(v.currentEnd);
  };
  var backwardNextCursor = function (x) {
      return {
          currents: x.currents,
          nexts: x.nexts,
          currentStart: x.currentStart,
          currentEnd: x.currentEnd,
          nextStart: x.nextStart,
          nextEnd: x.nextEnd - 1 | 0,
          realOperations: x.realOperations,
          keyToIndex: x.keyToIndex
      };
  };
  var backwardCurrentCursor = function (x) {
      return {
          currents: x.currents,
          nexts: x.nexts,
          currentStart: x.currentStart,
          currentEnd: x.currentEnd - 1 | 0,
          nextStart: x.nextStart,
          nextEnd: x.nextEnd,
          realOperations: x.realOperations,
          keyToIndex: x.keyToIndex
      };
  };
  var diff = function (dictHasKey) {
      return function (dictMonadRec) {
          return function (patch) {
              return function (parent) {
                  return function (currentChildren) {
                      return function (nextChildren) {
                          var takeDiff = function (s) {
                              if (s.nextStart <= s.nextEnd) {
                                  var nextKey = getKey(dictHasKey)(s.nextStart)(s["nexts"][s.nextStart]);
                                  var v = Foreign_Object.lookup(nextKey)(s.keyToIndex);
                                  if (v instanceof Data_Maybe.Nothing) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadRec.Monad0()).Bind1())(patch({
                                          current: Data_Maybe.Nothing.value,
                                          next: new Data_Maybe.Just(s["nexts"][s.nextStart]),
                                          realParentNode: parent,
                                          realNodeIndex: s.nextStart,
                                          moveIndex: Data_Maybe.Nothing.value
                                      }))(function () {
                                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Control_Monad_Rec_Class.Loop.create(forwardNextCursor(markRealAdding(s.nextStart)(s))));
                                      });
                                  };
                                  if (v instanceof Data_Maybe.Just) {
                                      var sourceIdx = realSourceIdx(v.value0)(s);
                                      return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadRec.Monad0()).Bind1())(patch({
                                          current: Data_Array.index(s.currents)(v.value0),
                                          next: new Data_Maybe.Just(s["nexts"][s.nextStart]),
                                          realParentNode: parent,
                                          realNodeIndex: sourceIdx,
                                          moveIndex: new Data_Maybe.Just(s.nextStart)
                                      }))(function () {
                                          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Control_Monad_Rec_Class.Loop.create((function () {
                                              var $80 = markProcessKey(nextKey);
                                              return function ($81) {
                                                  return forwardNextCursor($80($81));
                                              };
                                          })()(markRealMove(sourceIdx)(s.nextStart)(s))));
                                      });
                                  };
                                  throw new Error("Failed pattern match at Freedom.Renderer.Diff (line 174, column 15 - line 197, column 46): " + [ v.constructor.name ]);
                              };
                              if (Foreign_Object.size(s.keyToIndex) > 0) {
                                  var currentKey = (Foreign_Object.keys(s.keyToIndex))[0];
                                  var currentIdx = Data_Maybe.fromJust()(Foreign_Object.lookup(currentKey)(s.keyToIndex));
                                  var sourceIdx = realSourceIdx(currentIdx)(s);
                                  return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadRec.Monad0()).Bind1())(patch({
                                      current: Data_Array.index(s.currents)(currentIdx),
                                      next: Data_Maybe.Nothing.value,
                                      realParentNode: parent,
                                      realNodeIndex: sourceIdx,
                                      moveIndex: Data_Maybe.Nothing.value
                                  }))(function () {
                                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Control_Monad_Rec_Class.Loop.create(markProcessKey(currentKey)(markRealDeleting(sourceIdx)(s))));
                                  });
                              };
                              if (Data_Boolean.otherwise) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(Data_Unit.unit));
                              };
                              throw new Error("Failed pattern match at Freedom.Renderer.Diff (line 170, column 5 - line 211, column 37): " + [ s.constructor.name ]);
                          };
                          var initialState = initState(dictHasKey)(currentChildren)(nextChildren);
                          var equalKey = function (v) {
                              return function (v1) {
                                  if (v instanceof Data_Maybe.Just && v1 instanceof Data_Maybe.Just) {
                                      return v.value0 === v1.value0;
                                  };
                                  return false;
                              };
                          };
                          var takeDiffPerformant = function (s) {
                              if (s.currentStart > s.currentEnd || s.nextStart > s.nextEnd) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(s));
                              };
                              if (equalKey(Data_Functor.map(Data_Maybe.functorMaybe)(getKey(dictHasKey)(s.currentStart))(cursorCurrentStart(s)))(Data_Functor.map(Data_Maybe.functorMaybe)(getKey(dictHasKey)(s.nextStart))(cursorNextStart(s)))) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadRec.Monad0()).Bind1())(patch({
                                      current: cursorCurrentStart(s),
                                      next: cursorNextStart(s),
                                      realParentNode: parent,
                                      realNodeIndex: s.currentStart,
                                      moveIndex: Data_Maybe.Nothing.value
                                  }))(function () {
                                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Control_Monad_Rec_Class.Loop.create(forwardNextCursor(forwardCurrentCursor(s))));
                                  });
                              };
                              if (equalKey(Data_Functor.map(Data_Maybe.functorMaybe)(getKey(dictHasKey)(s.currentEnd))(cursorCurrentEnd(s)))(Data_Functor.map(Data_Maybe.functorMaybe)(getKey(dictHasKey)(s.nextEnd))(cursorNextEnd(s)))) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadRec.Monad0()).Bind1())(patch({
                                      current: cursorCurrentEnd(s),
                                      next: cursorNextEnd(s),
                                      realParentNode: parent,
                                      realNodeIndex: s.currentEnd,
                                      moveIndex: Data_Maybe.Nothing.value
                                  }))(function () {
                                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Control_Monad_Rec_Class.Loop.create(backwardNextCursor(backwardCurrentCursor(s))));
                                  });
                              };
                              if (Data_Boolean.otherwise) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(s));
                              };
                              throw new Error("Failed pattern match at Freedom.Renderer.Diff (line 148, column 5 - line 168, column 34): " + [ s.constructor.name ]);
                          };
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(storeKeyToIdx(dictHasKey))(Control_Monad_Rec_Class.tailRecM(dictMonadRec)(takeDiffPerformant)(initialState)))(function (v) {
                              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(takeDiff)(v);
                          });
                      };
                  };
              };
          };
      };
  };
  exports["HasKey"] = HasKey;
  exports["key"] = key;
  exports["fallbackPrefix"] = fallbackPrefix;
  exports["diff"] = diff;
  exports["hasKeyVNode"] = hasKeyVNode;
})(PS);
(function(exports) {
  'use strict';

  exports.setForeign = function(name) {
    return function(foreign) {
      return function(element) {
        return function() {
          element[name] = foreign;
        }
      }
    }
  }

  exports.setAttributeNS = function(ns) {
    return function(name) {
      return function(val) {
        return function(element) {
          return function() {
            element.setAttributeNS(ns, name, val);
            return {};
          }
        }
      }
    }
  }

  exports.removeAttributeNS = function(ns) {
    return function(name) {
      return function(element) {
        return function() {
          element.removeAttributeNS(ns, name);
          return {};
        }
      }
    }
  }

  exports.isProperty = function(name) {
    return function(element) {
      return name in element;
    }
  }

  exports.isBoolean = function(name) {
    return function(element) {
      return typeof element[name] === "boolean";
    }
  }
})(PS["Freedom.Renderer.Util"] = PS["Freedom.Renderer.Util"] || {});
(function(exports) {
  'use strict';

  exports._head = function(doc) {
    return function() {
      return doc.head;
    }
  }
})(PS["Freedom.Styler"] = PS["Freedom.Styler"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["SimpleEmitter"] = $PS["SimpleEmitter"] || {};
  var exports = $PS["SimpleEmitter"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];                
  var Emitter = function (x) {
      return x;
  };
  var subscribe = function (dictOrd) {
      return function (k) {
          return function (f) {
              return function (v) {
                  return function __do() {
                      var v1 = Effect_Ref.read(v)();
                      return Data_Function.flip(Effect_Ref.modify_)(v)((function () {
                          var v2 = Data_Map_Internal.lookup(dictOrd)(k)(v1);
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Data_Map_Internal.insert(dictOrd)(k)(f);
                          };
                          if (v2 instanceof Data_Maybe.Just) {
                              return Data_Map_Internal.insert(dictOrd)(k)(Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableArray)([ v2.value0, f ]));
                          };
                          throw new Error("Failed pattern match at SimpleEmitter (line 31, column 20 - line 33, column 46): " + [ v2.constructor.name ]);
                      })())();
                  };
              };
          };
      };
  };
  var emit = function (dictOrd) {
      return function (k) {
          return function (v) {
              return function __do() {
                  var v1 = Effect_Ref.read(v)();
                  var v2 = Data_Map_Internal.lookup(dictOrd)(k)(v1);
                  if (v2 instanceof Data_Maybe.Nothing) {
                      return Data_Unit.unit;
                  };
                  if (v2 instanceof Data_Maybe.Just) {
                      return v2.value0();
                  };
                  throw new Error("Failed pattern match at SimpleEmitter (line 45, column 3 - line 47, column 16): " + [ v2.constructor.name ]);
              };
          };
      };
  };
  var createEmitter = Data_Functor.map(Effect.functorEffect)(Emitter)(Effect_Ref["new"](Data_Map_Internal.empty));
  exports["createEmitter"] = createEmitter;
  exports["subscribe"] = subscribe;
  exports["emit"] = emit;
})(PS);
(function(exports) {
  "use strict";

  exports.createElement = function (localName) {
    return function (doc) {
      return function () {
        return doc.createElement(localName);
      };
    };
  };

  exports._createElementNS = function (ns) {
    return function (qualifiedName) {
      return function (doc) {
        return function () {
          return doc.createElementNS(ns, qualifiedName);
        };
      };
    };
  };

  exports.createTextNode = function (data) {
    return function (doc) {
      return function () {
        return doc.createTextNode(data);
      };
    };
  };
})(PS["Web.DOM.Document"] = PS["Web.DOM.Document"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.DOM.Document"] = $PS["Web.DOM.Document"] || {};
  var exports = $PS["Web.DOM.Document"];
  var $foreign = $PS["Web.DOM.Document"];
  var Data_Nullable = $PS["Data.Nullable"];
  var createElementNS = function ($5) {
      return $foreign["_createElementNS"](Data_Nullable.toNullable($5));
  };
  exports["createElementNS"] = createElementNS;
  exports["createElement"] = $foreign.createElement;
  exports["createTextNode"] = $foreign.createTextNode;
})(PS);
(function(exports) {
  "use strict";

  exports.className = function (node) {
    return function () {
      return node.className;
    };
  };

  exports.setClassName = function (className) {
    return function (node) {
      return function () {
        node.className = className;
        return {};
      };
    };
  };

  exports.setAttribute = function (name) {
    return function (value) {
      return function (element) {
        return function () {
          element.setAttribute(name, value);
          return {};
        };
      };
    };
  };

  exports._getAttribute = function (name) {
    return function (element) {
      return function () {
        return element.getAttribute(name);
      };
    };
  };

  exports.removeAttribute = function (name) {
    return function (element) {
      return function () {
        element.removeAttribute(name);
        return {};
      };
    };
  };
})(PS["Web.DOM.Element"] = PS["Web.DOM.Element"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.DOM.Element"] = $PS["Web.DOM.Element"] || {};
  var exports = $PS["Web.DOM.Element"];
  var $foreign = $PS["Web.DOM.Element"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var getAttribute = function (attr) {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $4 = $foreign["_getAttribute"](attr);
      return function ($5) {
          return $3($4($5));
      };
  };
  exports["toNode"] = toNode;
  exports["getAttribute"] = getAttribute;
  exports["setClassName"] = $foreign.setClassName;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["removeAttribute"] = $foreign.removeAttribute;
})(PS);
(function(exports) {
  "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };

  exports.childNodes = getEffProp("childNodes");

  exports.textContent = getEffProp("textContent");

  exports.setTextContent = function (value) {
    return function (node) {
      return function () {
        node.textContent = value;
        return {};
      };
    };
  };

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          return parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        return parent.removeChild(node);
      };
    };
  };
})(PS["Web.DOM.Node"] = PS["Web.DOM.Node"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.DOM.Node"] = $PS["Web.DOM.Node"] || {};
  var exports = $PS["Web.DOM.Node"];
  var $foreign = $PS["Web.DOM.Node"];
  exports["childNodes"] = $foreign.childNodes;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["appendChild"] = $foreign.appendChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS);
(function(exports) {
  "use strict";                                               

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["Web.DOM.ParentNode"] = PS["Web.DOM.ParentNode"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.DOM.ParentNode"] = $PS["Web.DOM.ParentNode"] || {};
  var exports = $PS["Web.DOM.ParentNode"];
  var $foreign = $PS["Web.DOM.ParentNode"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var QuerySelector = function (x) {
      return x;
  };
  var querySelector = function (qs) {
      var $3 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $4 = $foreign["_querySelector"](qs);
      return function ($5) {
          return $3($4($5));
      };
  };
  exports["QuerySelector"] = QuerySelector;
  exports["querySelector"] = querySelector;
})(PS);
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["Web.HTML"] = PS["Web.HTML"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML"] = $PS["Web.HTML"] || {};
  var exports = $PS["Web.HTML"];
  var $foreign = $PS["Web.HTML"];
  exports["window"] = $foreign.window;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML.HTMLDocument"] = $PS["Web.HTML.HTMLDocument"] || {};
  var exports = $PS["Web.HTML.HTMLDocument"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                      
  var toParentNode = Unsafe_Coerce.unsafeCoerce; 
  var toDocument = Unsafe_Coerce.unsafeCoerce;
  exports["toDocument"] = toDocument;
  exports["toParentNode"] = toParentNode;
})(PS);
(function(exports) {
  "use strict";

  exports._read = function (nothing, just, value) {
    var tag = Object.prototype.toString.call(value);
    if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
      return just(value);
    } else {
      return nothing;
    }
  };

  exports.classList = function (element) {
    return function () {
      return element.classList;
    };
  };
})(PS["Web.HTML.HTMLElement"] = PS["Web.HTML.HTMLElement"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML.HTMLElement"] = $PS["Web.HTML.HTMLElement"] || {};
  var exports = $PS["Web.HTML.HTMLElement"];
  var $foreign = $PS["Web.HTML.HTMLElement"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  var fromElement = function (x) {
      return $foreign["_read"](Data_Maybe.Nothing.value, Data_Maybe.Just.create, x);
  };
  exports["fromElement"] = fromElement;
  exports["toNode"] = toNode;
  exports["classList"] = $foreign.classList;
})(PS);
(function(exports) {
  "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["Web.HTML.Window"] = PS["Web.HTML.Window"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.HTML.Window"] = $PS["Web.HTML.Window"] || {};
  var exports = $PS["Web.HTML.Window"];
  var $foreign = $PS["Web.HTML.Window"];
  exports["document"] = $foreign.document;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Styler"] = $PS["Freedom.Styler"] || {};
  var exports = $PS["Freedom.Styler"];
  var $foreign = $PS["Freedom.Styler"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Char = $PS["Data.Char"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Effect = $PS["Effect"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign_Object = $PS["Foreign.Object"];
  var SimpleEmitter = $PS["SimpleEmitter"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var Register = (function () {
      function Register() {

      };
      Register.value = new Register();
      return Register;
  })();
  var replaceToken = function (instead) {
      return function (target) {
          return Data_String_Common.replaceAll("&")(instead)(target);
      };
  };
  var minify = (function () {
      var replaceWhitespaces = Data_String_Regex.replace(Data_String_Regex_Unsafe.unsafeRegex("\\s\\s+")(Data_String_Regex_Flags.global))(" ");
      var replaceReturns = Data_String_Common.replaceAll("\x0a")("");
      return function ($28) {
          return replaceWhitespaces(replaceReturns(Data_String_Common.trim($28)));
      };
  })();
  var head = (function () {
      var $29 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      return function ($30) {
          return $29($foreign["_head"]($30));
      };
  })();
  var generateHash = function (str) {
      var culc = function ($$char) {
          return function (value) {
              return (value * 33 | 0) ^ Data_Char.toCharCode($$char);
          };
      };
      var seed = Data_Foldable.foldr(Data_Foldable.foldableArray)(culc)(5381)(Data_String_CodeUnits.toCharArray(str));
      return Data_Int.toStringAs(Data_Int.base36)(seed >>> 0);
  };
  var eqEvent = new Data_Eq.Eq(function (x) {
      return function (y) {
          return true;
      };
  });
  var ordEvent = new Data_Ord.Ord(function () {
      return eqEvent;
  }, function (x) {
      return function (y) {
          return Data_Ordering.EQ.value;
      };
  });
  var registerStyle = function (style) {
      return function (v) {
          var minified = minify(style);
          var name = "d" + generateHash(minified);
          return function __do() {
              var v1 = Effect_Ref.read(v.stylesRef)();
              Control_Applicative.unless(Effect.applicativeEffect)(Foreign_Object.member(name)(v1))((function () {
                  var output = replaceToken(name)(minified);
                  return function __do() {
                      Effect_Ref.modify_(Foreign_Object.insert(name)(output))(v.stylesRef)();
                      return SimpleEmitter.emit(ordEvent)(Register.value)(v.emitter)();
                  };
              })())();
              return name;
          };
      };
  };
  var className = "freedom-styler";
  var getStyleNode = function __do() {
      var v = Control_Bind.bind(Effect.bindEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.toParentNode))(Web_DOM_ParentNode.querySelector(Web_DOM_ParentNode.QuerySelector("." + className)))();
      if (v instanceof Data_Maybe.Just) {
          return Web_DOM_Element.toNode(v.value0);
      };
      if (v instanceof Data_Maybe.Nothing) {
          var v1 = Control_Bind.bind(Effect.bindEffect)(Data_Functor.mapFlipped(Effect.functorEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(Web_HTML_HTMLDocument.toDocument))(Web_DOM_Document.createElement("style"))();
          Web_DOM_Element.setClassName(className)(v1)();
          var v2 = Data_Functor.mapFlipped(Effect.functorEffect)(Data_Functor.map(Effect.functorEffect)(Data_Maybe.fromJust())(Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))(head)))(Web_HTML_HTMLElement.toNode)();
          return Web_DOM_Node.appendChild(Web_DOM_Element.toNode(v1))(v2)();
      };
      throw new Error("Failed pattern match at Freedom.Styler (line 78, column 3 - line 84, column 38): " + [ v.constructor.name ]);
  };
  var createStyler = function __do() {
      var v = SimpleEmitter.createEmitter();
      var v1 = Effect_Ref["new"](Foreign_Object.empty)();
      Data_Function.flip(SimpleEmitter.subscribe(ordEvent)(Register.value))(v)(function __do() {
          var v2 = Data_Functor.map(Effect.functorEffect)((function () {
              var $31 = Data_String_Common.joinWith("");
              return function ($32) {
                  return $31(Foreign_Object.values($32));
              };
          })())(Effect_Ref.read(v1))();
          return Control_Bind.bind(Effect.bindEffect)(getStyleNode)(Web_DOM_Node.setTextContent(v2))();
      })();
      return {
          emitter: v,
          stylesRef: v1
      };
  };
  exports["createStyler"] = createStyler;
  exports["registerStyle"] = registerStyle;
})(PS);
(function(exports) {
  "use strict";

  exports.add = function(list) {
    return function(token) {
      return function() {
        return list.add(token);
      };
    };
  };

  exports.remove = function(list) {
    return function(token) {
      return function() {
        return list.remove(token);
      };
    };
  };
})(PS["Web.DOM.DOMTokenList"] = PS["Web.DOM.DOMTokenList"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.DOM.DOMTokenList"] = $PS["Web.DOM.DOMTokenList"] || {};
  var exports = $PS["Web.DOM.DOMTokenList"];
  var $foreign = $PS["Web.DOM.DOMTokenList"];
  exports["add"] = $foreign.add;
  exports["remove"] = $foreign.remove;
})(PS);
(function(exports) {
  "use strict";

  exports._item = function (index) {
    return function (list) {
      return function () {
        return list.item(index);
      };
    };
  };
})(PS["Web.DOM.NodeList"] = PS["Web.DOM.NodeList"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.DOM.NodeList"] = $PS["Web.DOM.NodeList"] || {};
  var exports = $PS["Web.DOM.NodeList"];
  var $foreign = $PS["Web.DOM.NodeList"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Effect = $PS["Effect"];                
  var item = function (i) {
      var $0 = Data_Functor.map(Effect.functorEffect)(Data_Nullable.toMaybe);
      var $1 = $foreign["_item"](i);
      return function ($2) {
          return $0($1($2));
      };
  };
  exports["item"] = item;
})(PS);
(function(exports) {
  "use strict";

  exports.eventListener = function (fn) {
    return function () {
      return function (event) {
        return fn(event)();
      };
    };
  };
})(PS["Web.Event.EventTarget"] = PS["Web.Event.EventTarget"] || {});
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.Event.EventTarget"] = $PS["Web.Event.EventTarget"] || {};
  var exports = $PS["Web.Event.EventTarget"];
  var $foreign = $PS["Web.Event.EventTarget"];
  exports["eventListener"] = $foreign.eventListener;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Renderer.Util"] = $PS["Freedom.Renderer.Util"] || {};
  var exports = $PS["Freedom.Renderer.Util"];
  var $foreign = $PS["Freedom.Renderer.Util"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Control_Safely = $PS["Control.Safely"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_String_Regex = $PS["Data.String.Regex"];
  var Data_String_Regex_Flags = $PS["Data.String.Regex.Flags"];
  var Data_String_Regex_Unsafe = $PS["Data.String.Regex.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Freedom_Styler = $PS["Freedom.Styler"];
  var Web_DOM_DOMTokenList = $PS["Web.DOM.DOMTokenList"];
  var Web_DOM_Document = $PS["Web.DOM.Document"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_DOM_NodeList = $PS["Web.DOM.NodeList"];
  var Web_Event_EventTarget = $PS["Web.Event.EventTarget"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_HTMLElement = $PS["Web.HTML.HTMLElement"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];                
  var IsRenderEnv = function (toIsSVG, toStyler) {
      this.toIsSVG = toIsSVG;
      this.toStyler = toStyler;
  };
  var Affable = function (Functor0, IsRenderEnv2, MonadRec1, toAff) {
      this.Functor0 = Functor0;
      this.IsRenderEnv2 = IsRenderEnv2;
      this.MonadRec1 = MonadRec1;
      this.toAff = toAff;
  };
  var xlinkRegex = Data_String_Regex_Unsafe.unsafeRegex("^xlink:")(Data_String_Regex_Flags.noFlags);
  var xlinkNameSpace = "http://www.w3.org/1999/xlink";
  var updateText_ = function (current) {
      return function (next) {
          return function (node) {
              return Control_Applicative.when(Effect.applicativeEffect)(current !== next)(Web_DOM_Node.setTextContent(next)(node));
          };
      };
  };
  var toStyler = function (dict) {
      return dict.toStyler;
  };
  var toIsSVG = function (dict) {
      return dict.toIsSVG;
  };
  var toAff = function (dict) {
      return dict.toAff;
  };
  var svgNameSpace = new Data_Maybe.Just("http://www.w3.org/2000/svg");
  var stylerAttributeName = "data-freedom-styler-class";
  var setHandler = function (dictAffable) {
      return function (name) {
          return function (h) {
              return function (el) {
                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_Event_EventTarget.eventListener((function () {
                          var $86 = toAff(dictAffable)(v);
                          return function ($87) {
                              return Effect_Aff.launchAff_($86(h($87)));
                          };
                      })())))(function (v1) {
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))($foreign.setForeign(name)(Foreign.unsafeToForeign(v1))(el));
                      });
                  });
              };
          };
      };
  };
  var runLifecycle = function (dictAffable) {
      return function (lifecycle) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v) {
              return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Effect_Aff.launchAff_(toAff(dictAffable)(v)(lifecycle)));
          });
      };
  };
  var removeHandler = function (name) {
      return $foreign.setForeign(name)(Foreign.unsafeToForeign(Data_Nullable["null"]));
  };
  var updateHandlers = function (dictAffable) {
      return function (currents) {
          return function (nexts) {
              return function (el) {
                  var updateByName = function (name) {
                      var v = Foreign_Object.lookup(name)(nexts);
                      var v1 = Foreign_Object.lookup(name)(currents);
                      if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
                      };
                      if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing) {
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(removeHandler(name)(el));
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return setHandler(dictAffable)(name)(v.value0)(el);
                      };
                      throw new Error("Failed pattern match at Freedom.Renderer.Util (line 138, column 7 - line 141, column 42): " + [ v1.constructor.name, v.constructor.name ]);
                  };
                  var names = Data_Array.union(Data_Eq.eqString)(Foreign_Object.keys(currents))(Foreign_Object.keys(nexts));
                  return Control_Safely.for_(Data_Foldable.foldableArray)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(names)(updateByName);
              };
          };
      };
  };
  var hasXlinkPrefix = Data_String_Regex.test(xlinkRegex);
  var doc = Control_Bind.bind(Effect.bindEffect)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))((function () {
      var $88 = Control_Applicative.pure(Effect.applicativeEffect);
      return function ($89) {
          return $88(Web_HTML_HTMLDocument.toDocument($89));
      };
  })());
  var createText_ = function (text) {
      return Control_Bind.bind(Effect.bindEffect)(doc)(Web_DOM_Document.createTextNode(text));
  };
  var classNames = function (val) {
      return Data_Array.filter((function () {
          var $90 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraBoolean);
          return function ($91) {
              return $90(Data_String_Common["null"]($91));
          };
      })())(Data_String_Common.split(" ")(val));
  };
  var removeClass = function (dictIsRenderEnv) {
      return function (val) {
          return function (el) {
              var removeSVGContext = function __do() {
                  var v = Web_DOM_Element.getAttribute("class")(el)();
                  if (v instanceof Data_Maybe.Nothing) {
                      return Data_Unit.unit;
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Data_Function.flip(Web_DOM_Element.setAttribute("class"))(el)(Data_String_Common.joinWith(" ")(Data_Array.filter(function (v1) {
                          return v1 !== val;
                      })(classNames(v.value0))))();
                  };
                  throw new Error("Failed pattern match at Freedom.Renderer.Util (line 281, column 7 - line 285, column 70): " + [ v.constructor.name ]);
              };
              var remove = (function () {
                  var v = Web_HTML_HTMLElement.fromElement(el);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Effect.bindEffect)(Web_HTML_HTMLElement.classList(v.value0))(Data_Function.flip(Web_DOM_DOMTokenList.remove)(val));
                  };
                  throw new Error("Failed pattern match at Freedom.Renderer.Util (line 275, column 7 - line 278, column 49): " + [ v.constructor.name ]);
              })();
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(toIsSVG(dictIsRenderEnv))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect))))(function (v) {
                  return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))((function () {
                      if (v) {
                          return removeSVGContext;
                      };
                      return remove;
                  })());
              });
          };
      };
  };
  var removeProp = function ($copy_dictIsRenderEnv) {
      return function ($copy_v) {
          return function ($copy_v1) {
              return function ($copy_el) {
                  var $tco_var_dictIsRenderEnv = $copy_dictIsRenderEnv;
                  var $tco_var_v = $copy_v;
                  var $tco_var_v1 = $copy_v1;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictIsRenderEnv, v, v1, el) {
                      if (v === "css") {
                          $tco_done = true;
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.getAttribute(stylerAttributeName)(el)))(function (v2) {
                              if (v2 instanceof Data_Maybe.Nothing) {
                                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
                              };
                              if (v2 instanceof Data_Maybe.Just) {
                                  return removeClass(dictIsRenderEnv)(v2.value0)(el);
                              };
                              throw new Error("Failed pattern match at Freedom.Renderer.Util (line 152, column 3 - line 155, column 40): " + [ v2.constructor.name ]);
                          });
                      };
                      if (v === "class") {
                          $tco_var_dictIsRenderEnv = dictIsRenderEnv;
                          $tco_var_v = "className";
                          $tco_var_v1 = v1;
                          $copy_el = el;
                          return;
                      };
                      if (v === "className") {
                          $tco_done = true;
                          return Control_Safely.for_(Data_Foldable.foldableArray)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(classNames(v1))(Data_Function.flip(removeClass(dictIsRenderEnv))(el));
                      };
                      if (v === "style") {
                          $tco_done = true;
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.removeAttribute("style")(el));
                      };
                      if (v === "list") {
                          $tco_done = true;
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.removeAttribute("list")(el));
                      };
                      if (v === "form") {
                          $tco_done = true;
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.removeAttribute("form")(el));
                      };
                      if (v === "dropzone") {
                          $tco_done = true;
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.removeAttribute("dropzone")(el));
                      };
                      $tco_done = true;
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(toIsSVG(dictIsRenderEnv))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect))))(function (v2) {
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))((function () {
                              var $56 = v2 && hasXlinkPrefix(v);
                              if ($56) {
                                  return $foreign.removeAttributeNS(xlinkNameSpace)(Data_String_Regex.replace(xlinkRegex)("")(v))(el);
                              };
                              return function __do() {
                                  Control_Applicative.when(Effect.applicativeEffect)($foreign.isProperty(v)(el) && !v2)($foreign.setForeign(v)(Foreign.unsafeToForeign(""))(el))();
                                  return Web_DOM_Element.removeAttribute(v)(el)();
                              };
                          })());
                      });
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictIsRenderEnv, $tco_var_v, $tco_var_v1, $copy_el);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var childNode = function (i) {
      return function (node) {
          return Control_Bind.bind(Effect.bindEffect)(Web_DOM_Node.childNodes(node))(Web_DOM_NodeList.item(i));
      };
  };
  var addClass = function (dictIsRenderEnv) {
      return function (val) {
          return function (el) {
              var addSVGContext = function __do() {
                  var v = Web_DOM_Element.getAttribute("class")(el)();
                  return Data_Function.flip(Web_DOM_Element.setAttribute("class"))(el)((function () {
                      if (v instanceof Data_Maybe.Nothing) {
                          return val;
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Data_String_Common.joinWith(" ")(Data_Array.snoc(classNames(v.value0))(val));
                      };
                      throw new Error("Failed pattern match at Freedom.Renderer.Util (line 259, column 40 - line 262, column 57): " + [ v.constructor.name ]);
                  })())();
              };
              var add = (function () {
                  var v = Web_HTML_HTMLElement.fromElement(el);
                  if (v instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Bind.bind(Effect.bindEffect)(Web_HTML_HTMLElement.classList(v.value0))(Data_Function.flip(Web_DOM_DOMTokenList.add)(val));
                  };
                  throw new Error("Failed pattern match at Freedom.Renderer.Util (line 253, column 7 - line 256, column 46): " + [ v.constructor.name ]);
              })();
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(toIsSVG(dictIsRenderEnv))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect))))(function (v) {
                  return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))((function () {
                      if (v) {
                          return addSVGContext;
                      };
                      return add;
                  })());
              });
          };
      };
  };
  var setProp = function ($copy_dictIsRenderEnv) {
      return function ($copy_v) {
          return function ($copy_val) {
              return function ($copy_el) {
                  var $tco_var_dictIsRenderEnv = $copy_dictIsRenderEnv;
                  var $tco_var_v = $copy_v;
                  var $tco_var_val = $copy_val;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(dictIsRenderEnv, v, val, el) {
                      if (v === "css") {
                          $tco_done = true;
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(toStyler(dictIsRenderEnv))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect))))(function (v1) {
                              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Freedom_Styler.registerStyle(val)(v1)))(function (v2) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(removeProp(dictIsRenderEnv)("css")("dummyVal")(el))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.setAttribute(stylerAttributeName)(v2)(el)))(function () {
                                          return addClass(dictIsRenderEnv)(v2)(el);
                                      });
                                  });
                              });
                          });
                      };
                      if (v === "class") {
                          $tco_var_dictIsRenderEnv = dictIsRenderEnv;
                          $tco_var_v = "className";
                          $tco_var_val = val;
                          $copy_el = el;
                          return;
                      };
                      if (v === "className") {
                          $tco_done = true;
                          return Control_Safely.for_(Data_Foldable.foldableArray)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(classNames(val))(Data_Function.flip(addClass(dictIsRenderEnv))(el));
                      };
                      if (v === "style") {
                          $tco_done = true;
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.setAttribute("style")(val)(el));
                      };
                      if (v === "list") {
                          $tco_done = true;
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.setAttribute("list")(val)(el));
                      };
                      if (v === "form") {
                          $tco_done = true;
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.setAttribute("form")(val)(el));
                      };
                      if (v === "dropzone") {
                          $tco_done = true;
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Web_DOM_Element.setAttribute("dropzone")(val)(el));
                      };
                      $tco_done = true;
                      return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(toIsSVG(dictIsRenderEnv))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect))))(function (v1) {
                          return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))((function () {
                              var $70 = $foreign.isProperty(v)(el) && !v1;
                              if ($70) {
                                  var $71 = $foreign.isBoolean(v)(el);
                                  if ($71) {
                                      return $foreign.setForeign(v)(Foreign.unsafeToForeign(!(val === "false")))(el);
                                  };
                                  return $foreign.setForeign(v)(Foreign.unsafeToForeign(val))(el);
                              };
                              var $72 = v1 && hasXlinkPrefix(v);
                              if ($72) {
                                  return $foreign.setAttributeNS(xlinkNameSpace)(Data_String_Regex.replace(xlinkRegex)("")(v))(val)(el);
                              };
                              return Web_DOM_Element.setAttribute(v)(val)(el);
                          })());
                      });
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_dictIsRenderEnv, $tco_var_v, $tco_var_val, $copy_el);
                  };
                  return $tco_result;
              };
          };
      };
  };
  var createElement_ = function (dictAffable) {
      return function (v) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(toIsSVG(dictAffable.IsRenderEnv2()))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect))))(function (v1) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))((function () {
                  if (v1) {
                      return Control_Bind.bind(Effect.bindEffect)(doc)(Web_DOM_Document.createElementNS(svgNameSpace)(v.tag));
                  };
                  return Control_Bind.bind(Effect.bindEffect)(doc)(Web_DOM_Document.createElement(v.tag));
              })()))(function (v2) {
                  var props$prime = Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.props);
                  var handlers$prime = Foreign_Object.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.handlers);
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Safely.for_(Data_Foldable.foldableArray)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(props$prime)(Data_Tuple.uncurry(function (name) {
                      return function (val) {
                          return setProp(dictAffable.IsRenderEnv2())(name)(val)(v2);
                      };
                  })))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Safely.for_(Data_Foldable.foldableArray)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(handlers$prime)(Data_Tuple.uncurry(function (name) {
                          return function (h) {
                              return setHandler(dictAffable)(name)(h)(v2);
                          };
                      })))(function () {
                          return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(v2);
                      });
                  });
              });
          });
      };
  };
  var updateProps = function (dictIsRenderEnv) {
      return function (currents) {
          return function (nexts) {
              return function (el) {
                  var updateByName = function (name) {
                      var v = Foreign_Object.lookup(name)(nexts);
                      var v1 = Foreign_Object.lookup(name)(currents);
                      if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
                      };
                      if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Nothing) {
                          return removeProp(dictIsRenderEnv)(name)(v1.value0)(el);
                      };
                      if (v1 instanceof Data_Maybe.Nothing && v instanceof Data_Maybe.Just) {
                          return setProp(dictIsRenderEnv)(name)(v.value0)(el);
                      };
                      if (v1 instanceof Data_Maybe.Just && v instanceof Data_Maybe.Just) {
                          if (v1.value0 === v.value0) {
                              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
                          };
                          if (Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqString)(name)([ "class", "className" ])) {
                              return setProp(dictIsRenderEnv)(name)(v.value0)(el);
                          };
                          if (Data_Boolean.otherwise) {
                              var nextClasses = classNames(v.value0);
                              var currentClasses = classNames(v1.value0);
                              var removeTargets = Data_Array.filter(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqString))(nextClasses))(currentClasses);
                              var addTargets = Data_Array.filter(Data_Function.flip(Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqString))(currentClasses))(nextClasses);
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(removeProp(dictIsRenderEnv)(name)(Data_String_Common.joinWith(" ")(removeTargets))(el))(function () {
                                  return setProp(dictIsRenderEnv)(name)(Data_String_Common.joinWith(" ")(addTargets))(el);
                              });
                          };
                      };
                      throw new Error("Failed pattern match at Freedom.Renderer.Util (line 223, column 7 - line 237, column 62): " + [ v1.constructor.name, v.constructor.name ]);
                  };
                  var names = Data_Array.union(Data_Eq.eqString)(Foreign_Object.keys(currents))(Foreign_Object.keys(nexts));
                  return Control_Safely.for_(Data_Foldable.foldableArray)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(names)(updateByName);
              };
          };
      };
  };
  var updateElement_ = function (dictAffable) {
      return function (current) {
          return function (next) {
              return function (el) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(updateProps(dictAffable.IsRenderEnv2())(current.props)(next.props)(el))(function () {
                      return updateHandlers(dictAffable)(current.handlers)(next.handlers)(el);
                  });
              };
          };
      };
  };
  exports["IsRenderEnv"] = IsRenderEnv;
  exports["toStyler"] = toStyler;
  exports["toIsSVG"] = toIsSVG;
  exports["Affable"] = Affable;
  exports["toAff"] = toAff;
  exports["childNode"] = childNode;
  exports["createText_"] = createText_;
  exports["updateText_"] = updateText_;
  exports["createElement_"] = createElement_;
  exports["updateElement_"] = updateElement_;
  exports["runLifecycle"] = runLifecycle;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Web.DOM.Text"] = $PS["Web.DOM.Text"] || {};
  var exports = $PS["Web.DOM.Text"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                   
  var toNode = Unsafe_Coerce.unsafeCoerce;
  exports["toNode"] = toNode;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Renderer"] = $PS["Freedom.Renderer"] || {};
  var exports = $PS["Freedom.Renderer"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Free_Trans = $PS["Control.Monad.Free.Trans"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Reader_Trans = $PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Rec_Class = $PS["Control.Monad.Rec.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Freedom_Renderer_Diff = $PS["Freedom.Renderer.Diff"];
  var Freedom_Renderer_Util = $PS["Freedom.Renderer.Util"];
  var Freedom_VNode = $PS["Freedom.VNode"];
  var Web_DOM_Element = $PS["Web.DOM.Element"];
  var Web_DOM_Node = $PS["Web.DOM.Node"];
  var Web_DOM_ParentNode = $PS["Web.DOM.ParentNode"];
  var Web_DOM_Text = $PS["Web.DOM.Text"];
  var Web_HTML = $PS["Web.HTML"];
  var Web_HTML_HTMLDocument = $PS["Web.HTML.HTMLDocument"];
  var Web_HTML_Window = $PS["Web.HTML.Window"];
  var isRenderEnvRenderEnv = new Freedom_Renderer_Util.IsRenderEnv(function (v) {
      return v.isSVG;
  }, function (v) {
      return v.styler;
  });
  var isRenderEnvOperator = new Freedom_Renderer_Util.IsRenderEnv(function (v) {
      return v.isSVG;
  }, function (v) {
      return v.styler;
  });
  var genOperator = function (bf) {
      return function (originChildren) {
          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Freedom_VNode.fromBridgeFoot(bf)))(function (v) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Control_Monad_Reader_Class.ask(Control_Monad_Reader_Trans.monadAskReaderT(Effect.monadEffect)))(function (v1) {
                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))({
                      transformF: v1.transformF,
                      styler: v1.styler,
                      isSVG: v1.isSVG,
                      operationRef: v,
                      originChildren: originChildren
                  });
              });
          });
      };
  };
  var createRenderer = function (selector) {
      return function (view) {
          return function (transformF) {
              return function (getState) {
                  return function (styler) {
                      return function __do() {
                          var v = Data_Functor.map(Effect.functorEffect)(Web_HTML_HTMLDocument.toParentNode)(Control_Bind.bind(Effect.bindEffect)(Web_HTML.window)(Web_HTML_Window.document))();
                          var v1 = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Maybe.functorMaybe)(Web_DOM_Element.toNode))(Web_DOM_ParentNode.querySelector(selector)(v))();
                          var v2 = Effect_Ref["new"]([  ])();
                          return {
                              container: v1,
                              view: view,
                              historyRef: v2,
                              transformF: transformF,
                              getState: getState,
                              styler: styler
                          };
                      };
                  };
              };
          };
      };
  };
  var changeSVGContext = function (isSVG) {
      return function (v) {
          if (v.isSVG) {
              return v;
          };
          return {
              styler: v.styler,
              transformF: v.transformF,
              isSVG: isSVG
          };
      };
  };
  var switchContextIfSVG = function (v) {
      return function (m) {
          if (v instanceof Freedom_VNode.Text) {
              return m;
          };
          if (v instanceof Freedom_VNode.Element) {
              return Control_Monad_Reader_Class.local(Control_Monad_Reader_Trans.monadReaderReaderT(Effect.monadEffect))(changeSVGContext(v.value0.tag === "svg"))(m);
          };
          if (v instanceof Freedom_VNode.OperativeElement) {
              return Control_Monad_Reader_Class.local(Control_Monad_Reader_Trans.monadReaderReaderT(Effect.monadEffect))(changeSVGContext(v.value1.tag === "svg"))(m);
          };
          throw new Error("Failed pattern match at Freedom.Renderer (line 143, column 1 - line 147, column 25): " + [ v.constructor.name, m.constructor.name ]);
      };
  };
  var affableAff = function (dictFunctor) {
      return new Freedom_Renderer_Util.Affable(function () {
          return dictFunctor;
      }, function () {
          return isRenderEnvRenderEnv;
      }, function () {
          return Effect_Aff.monadRecAff;
      }, function (v) {
          return Control_Monad_Free_Trans.runFreeT(dictFunctor)(Effect_Aff.monadRecAff)(v.transformF);
      });
  };
  var runDidDelete = function (dictFunctor) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Freedom_VNode.OperativeElement) {
                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(genOperator(v1.value0)([  ]))(function (v2) {
                      return Control_Monad_Reader_Trans.withReaderT(Data_Function["const"](v2))(Freedom_Renderer_Util.runLifecycle(affableVRender(dictFunctor))(v1.value1.didDelete(v)));
                  });
              };
              if (v1 instanceof Freedom_VNode.Element) {
                  return Freedom_Renderer_Util.runLifecycle(affableAff(dictFunctor))(v1.value0.didDelete(v));
              };
              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
          };
      };
  };
  var runDidCreate = function (dictFunctor) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Freedom_VNode.OperativeElement) {
                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(genOperator(v1.value0)(v1.value1.children))(function (v2) {
                      return Control_Monad_Reader_Trans.withReaderT(Data_Function["const"](v2))(Freedom_Renderer_Util.runLifecycle(affableVRender(dictFunctor))(v1.value1.didCreate(v)));
                  });
              };
              if (v1 instanceof Freedom_VNode.Element) {
                  return Freedom_Renderer_Util.runLifecycle(affableAff(dictFunctor))(v1.value0.didCreate(v));
              };
              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
          };
      };
  };
  var patch = function (dictFunctor) {
      return function (v) {
          if (v.current instanceof Data_Maybe.Nothing && v.next instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
          };
          if (v.current instanceof Data_Maybe.Nothing && v.next instanceof Data_Maybe.Just) {
              return switchContextIfSVG(v.next.value0.value1)(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(operateCreating(dictFunctor)(v.next.value0.value1))(function (v1) {
                  return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Freedom_Renderer_Util.childNode(v.realNodeIndex)(v.realParentNode)))(function (v2) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Data_Functor["void"](Effect.functorEffect)((function () {
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Web_DOM_Node.appendChild(v1)(v.realParentNode);
                          };
                          if (v2 instanceof Data_Maybe.Just) {
                              return Web_DOM_Node.insertBefore(v1)(v2.value0)(v.realParentNode);
                          };
                          throw new Error("Failed pattern match at Freedom.Renderer (line 114, column 14 - line 116, column 64): " + [ v2.constructor.name ]);
                      })())))(function () {
                          return runDidCreate(dictFunctor)(v1)(v.next.value0.value1);
                      });
                  });
              }));
          };
          if (v.current instanceof Data_Maybe.Just && v.next instanceof Data_Maybe.Nothing) {
              return switchContextIfSVG(v.current.value0.value1)(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Freedom_Renderer_Util.childNode(v.realNodeIndex)(v.realParentNode)))(function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(operateDeleting(dictFunctor)(v1.value0)(v.current.value0.value1))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Data_Functor["void"](Effect.functorEffect)(Web_DOM_Node.removeChild(v1.value0)(v.realParentNode))))(function () {
                              return runDidDelete(dictFunctor)(v1.value0)(v.current.value0.value1);
                          });
                      });
                  };
                  throw new Error("Failed pattern match at Freedom.Renderer (line 121, column 7 - line 126, column 37): " + [ v1.constructor.name ]);
              }));
          };
          if (v.current instanceof Data_Maybe.Just && v.next instanceof Data_Maybe.Just) {
              return switchContextIfSVG(v.next.value0.value1)(Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Freedom_Renderer_Util.childNode(v.realNodeIndex)(v.realParentNode)))(function (v1) {
                  if (v1 instanceof Data_Maybe.Nothing) {
                      return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
                  };
                  if (v1 instanceof Data_Maybe.Just) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))((function () {
                          if (v.moveIndex instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
                          };
                          if (v.moveIndex instanceof Data_Maybe.Just) {
                              return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))((function () {
                                  var adjustedIdx = (function () {
                                      var $102 = v.realNodeIndex < v.moveIndex.value0;
                                      if ($102) {
                                          return v.moveIndex.value0 + 1 | 0;
                                      };
                                      return v.moveIndex.value0;
                                  })();
                                  return function __do() {
                                      var v2 = Freedom_Renderer_Util.childNode(adjustedIdx)(v.realParentNode)();
                                      return Data_Functor["void"](Effect.functorEffect)((function () {
                                          if (v2 instanceof Data_Maybe.Nothing) {
                                              return Web_DOM_Node.appendChild(v1.value0)(v.realParentNode);
                                          };
                                          if (v2 instanceof Data_Maybe.Just) {
                                              return Web_DOM_Node.insertBefore(v1.value0)(v2.value0)(v.realParentNode);
                                          };
                                          throw new Error("Failed pattern match at Freedom.Renderer (line 138, column 20 - line 140, column 77): " + [ v2.constructor.name ]);
                                      })())();
                                  };
                              })());
                          };
                          throw new Error("Failed pattern match at Freedom.Renderer (line 133, column 11 - line 140, column 77): " + [ v.moveIndex.constructor.name ]);
                      })())(function () {
                          return operateUpdating(dictFunctor)(v1.value0)(v.current.value0.value1)(v.next.value0.value1);
                      });
                  };
                  throw new Error("Failed pattern match at Freedom.Renderer (line 130, column 7 - line 141, column 46): " + [ v1.constructor.name ]);
              }));
          };
          throw new Error("Failed pattern match at Freedom.Renderer (line 107, column 3 - line 141, column 46): " + [ v.current.constructor.name, v.next.constructor.name ]);
      };
  };
  var operateUpdating = function (dictFunctor) {
      return function (v) {
          return function (v1) {
              return function (v2) {
                  if (v1 instanceof Freedom_VNode.Text && v2 instanceof Freedom_VNode.Text) {
                      return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Freedom_Renderer_Util.updateText_(v1.value0)(v2.value0)(v));
                  };
                  if (v1 instanceof Freedom_VNode.OperativeElement && v2 instanceof Freedom_VNode.OperativeElement) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Freedom_VNode.bridge(v1.value0)(v2.value0)))(function () {
                          return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(genOperator(v2.value0)(v2.value1.children))(function (v3) {
                              return Control_Monad_Reader_Trans.withReaderT(Data_Function["const"](v3))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Freedom_Renderer_Util.updateElement_(affableVRender(dictFunctor))(v1.value1)(v2.value1)(v))(function () {
                                  return Freedom_Renderer_Util.runLifecycle(affableVRender(dictFunctor))(v2.value1.didUpdate(v));
                              }));
                          });
                      });
                  };
                  if (v1 instanceof Freedom_VNode.Element && v2 instanceof Freedom_VNode.Element) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Freedom_Renderer_Util.updateElement_(affableAff(dictFunctor))(v1.value0)(v2.value0)(v))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Freedom_Renderer_Diff.diff(Freedom_Renderer_Diff.hasKeyVNode)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(patch(dictFunctor))(v)(v1.value0.children)(v2.value0.children))(function () {
                              return Freedom_Renderer_Util.runLifecycle(affableAff(dictFunctor))(v2.value0.didUpdate(v));
                          });
                      });
                  };
                  return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
              };
          };
      };
  };
  var operateDeleting = function (dictFunctor) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Freedom_VNode.Element) {
                  return Freedom_Renderer_Diff.diff(Freedom_Renderer_Diff.hasKeyVNode)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(patch(dictFunctor))(v)(v1.value0.children)([  ]);
              };
              return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(Data_Unit.unit);
          };
      };
  };
  var operateCreating = function (dictFunctor) {
      return function (v) {
          if (v instanceof Freedom_VNode.Text) {
              return Effect_Class.liftEffect(Control_Monad_Reader_Trans.monadEffectReader(Effect_Class.monadEffectEffect))(Control_Bind.bind(Effect.bindEffect)(Freedom_Renderer_Util.createText_(v.value0))((function () {
                  var $151 = Control_Applicative.pure(Effect.applicativeEffect);
                  return function ($152) {
                      return $151(Web_DOM_Text.toNode($152));
                  };
              })()));
          };
          if (v instanceof Freedom_VNode.OperativeElement) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(genOperator(v.value0)(v.value1.children))(function (v1) {
                  return Control_Monad_Reader_Trans.withReaderT(Data_Function["const"](v1))(Data_Functor.map(Control_Monad_Reader_Trans.functorReaderT(Effect.functorEffect))(Web_DOM_Element.toNode)(Freedom_Renderer_Util.createElement_(affableVRender(dictFunctor))(v.value1)));
              });
          };
          if (v instanceof Freedom_VNode.Element) {
              return Control_Bind.bind(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Freedom_Renderer_Util.createElement_(affableAff(dictFunctor))(v.value0))(function (v1) {
                  var node = Web_DOM_Element.toNode(v1);
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Reader_Trans.bindReaderT(Effect.bindEffect))(Freedom_Renderer_Diff.diff(Freedom_Renderer_Diff.hasKeyVNode)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(patch(dictFunctor))(node)([  ])(v.value0.children))(function () {
                      return Control_Applicative.pure(Control_Monad_Reader_Trans.applicativeReaderT(Effect.applicativeEffect))(node);
                  });
              });
          };
          throw new Error("Failed pattern match at Freedom.Renderer (line 160, column 1 - line 164, column 25): " + [ v.constructor.name ]);
      };
  };
  var affableVRender = function (dictFunctor) {
      return new Freedom_Renderer_Util.Affable(function () {
          return dictFunctor;
      }, function () {
          return isRenderEnvOperator;
      }, function () {
          return Freedom_VNode.monadRecVRender;
      }, function (v) {
          var renderEnv = {
              transformF: v.transformF,
              styler: v.styler,
              isSVG: v.isSVG
          };
          var renderChildren = function (node) {
              return function (children) {
                  return function __do() {
                      var v1 = Data_Function.flip(Effect_Ref.modify)(v.operationRef)(function (h) {
                          return Data_Array.take(2)(Data_Array.cons(children)(h));
                      })();
                      return Data_Function.flip(Control_Monad_Reader_Trans.runReaderT)(renderEnv)(Freedom_Renderer_Diff.diff(Freedom_Renderer_Diff.hasKeyVNode)(Control_Monad_Reader_Trans.monadRecReaderT(Control_Monad_Rec_Class.monadRecEffect))(patch(dictFunctor))(node)(Data_Maybe.fromMaybe([  ])(Data_Array.index(v1)(1)))(Data_Maybe.fromMaybe([  ])(Data_Array.index(v1)(0))))();
                  };
              };
          };
          var getOriginChildren = Control_Applicative.pure(Effect.applicativeEffect)(v.originChildren);
          var getLatestRenderedChildren = Data_Functor.map(Effect.functorEffect)(Data_Functor.map(Data_Functor.functorFn)(Data_Maybe.fromMaybe([  ]))(function (v1) {
              return Data_Array.index(v1)(0);
          }))(Effect_Ref.read(v.operationRef));
          var nt = Data_Function.flip(Freedom_VNode.runVRender)({
              getOriginChildren: getOriginChildren,
              getLatestRenderedChildren: getLatestRenderedChildren,
              renderChildren: renderChildren
          });
          var $153 = Control_Monad_Free_Trans.runFreeT(dictFunctor)(Effect_Aff.monadRecAff)(v.transformF);
          var $154 = Control_Monad_Free_Trans.hoistFreeT(dictFunctor)(Effect_Aff.functorAff)(nt);
          return function ($155) {
              return $153($154($155));
          };
      });
  };
  var render = function (dictFunctor) {
      return function (v) {
          if (v.container instanceof Data_Maybe.Nothing) {
              return Effect_Console.error("Received selector is not found.");
          };
          if (v.container instanceof Data_Maybe.Just) {
              return function __do() {
                  var v1 = v.getState();
                  var v2 = Data_Function.flip(Effect_Ref.modify)(v.historyRef)(function (h) {
                      return Data_Array.take(2)(Data_Array.cons(v.view(v1))(h));
                  })();
                  return Data_Function.flip(Control_Monad_Reader_Trans.runReaderT)({
                      transformF: v.transformF,
                      styler: v.styler,
                      isSVG: false
                  })(patch(dictFunctor)({
                      current: Data_Array.index(v2)(1),
                      next: Data_Array.index(v2)(0),
                      realParentNode: v.container.value0,
                      realNodeIndex: 0,
                      moveIndex: Data_Maybe.Nothing.value
                  }))();
              };
          };
          throw new Error("Failed pattern match at Freedom.Renderer (line 62, column 3 - line 73, column 10): " + [ v.container.constructor.name ]);
      };
  };
  exports["createRenderer"] = createRenderer;
  exports["render"] = render;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Store"] = $PS["Freedom.Store"] || {};
  var exports = $PS["Freedom.Store"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Effect_Ref = $PS["Effect.Ref"];
  var SimpleEmitter = $PS["SimpleEmitter"];                
  var Emit = (function () {
      function Emit() {

      };
      Emit.value = new Emit();
      return Emit;
  })();
  var select = function (v) {
      return Effect_Ref.read(v.stateRef);
  };
  var eqEvent = new Data_Eq.Eq(function (x) {
      return function (y) {
          return true;
      };
  });
  var ordEvent = new Data_Ord.Ord(function () {
      return eqEvent;
  }, function (x) {
      return function (y) {
          return Data_Ordering.EQ.value;
      };
  });
  var reduce = function (v) {
      return function (f) {
          return function __do() {
              Effect_Ref.modify_(f)(v.stateRef)();
              return SimpleEmitter.emit(ordEvent)(Emit.value)(v.emitter)();
          };
      };
  };
  var query = function (store) {
      return {
          select: select(store),
          reduce: reduce(store)
      };
  };
  var subscribe = function (f) {
      return function (v) {
          return SimpleEmitter.subscribe(ordEvent)(Emit.value)(f)(v.emitter);
      };
  };
  var createStore = function (state) {
      return function __do() {
          var v = SimpleEmitter.createEmitter();
          var v1 = Effect_Ref["new"](state)();
          return {
              emitter: v,
              stateRef: v1
          };
      };
  };
  exports["createStore"] = createStore;
  exports["query"] = query;
  exports["subscribe"] = subscribe;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Subscription"] = $PS["Freedom.Subscription"] || {};
  var exports = $PS["Freedom.Subscription"];
  var runSubscription = function (dictFunctor) {
      return function (transform) {
          return function (v) {
              return v(transform);
          };
      };
  };
  exports["runSubscription"] = runSubscription;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom"] = $PS["Freedom"] || {};
  var exports = $PS["Freedom"];
  var Control_Monad_Free_Trans = $PS["Control.Monad.Free.Trans"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Freedom_Renderer = $PS["Freedom.Renderer"];
  var Freedom_Store = $PS["Freedom.Store"];
  var Freedom_Styler = $PS["Freedom.Styler"];
  var Freedom_Subscription = $PS["Freedom.Subscription"];                
  var run = function (dictFunctor) {
      return function (v) {
          return function __do() {
              var v1 = Freedom_Styler.createStyler();
              var v2 = Freedom_Store.createStore(v.initialState)();
              var query$prime = Freedom_Store.query(v2);
              var transformF$prime = v.transformF(query$prime);
              Data_Foldable.sequence_(Effect.applicativeEffect)(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(Freedom_Subscription.runSubscription(dictFunctor)(Control_Monad_Free_Trans.runFreeT(dictFunctor)(Effect_Aff.monadRecAff)(transformF$prime)))(v.subscriptions))();
              var v3 = Freedom_Renderer.createRenderer(v.selector)(v.view)(transformF$prime)(query$prime.select)(v1)();
              Freedom_Store.subscribe(Freedom_Renderer.render(dictFunctor)(v3))(v2)();
              return Freedom_Renderer.render(dictFunctor)(v3)();
          };
      };
  };
  exports["run"] = run;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Markup.Common"] = $PS["Freedom.Markup.Common"] || {};
  var exports = $PS["Freedom.Markup.Common"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Free_Trans = $PS["Control.Monad.Free.Trans"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Freedom_VNode = $PS["Freedom.VNode"];                
  var tag = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (tag$prime) {
              return {
                  tag: tag$prime,
                  props: Foreign_Object.empty,
                  handlers: Foreign_Object.empty,
                  children: [  ],
                  didCreate: Data_Function["const"](Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(dictFunctor)(dictMonadRec.Monad0()))(Data_Unit.unit)),
                  didUpdate: Data_Function["const"](Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(dictFunctor)(dictMonadRec.Monad0()))(Data_Unit.unit)),
                  didDelete: Data_Function["const"](Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(dictFunctor)(dictMonadRec.Monad0()))(Data_Unit.unit))
              };
          };
      };
  };
  var t = (function () {
      var $27 = Freedom_VNode.VNode.create("");
      return function ($28) {
          return $27(Freedom_VNode.Text.create($28));
      };
  })();
  var prop = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (name) {
              return function (val) {
                  return function (obj) {
                      return {
                          tag: obj.tag,
                          props: Foreign_Object.insert(name)(val)(obj.props),
                          handlers: obj.handlers,
                          children: obj.children,
                          didCreate: obj.didCreate,
                          didUpdate: obj.didUpdate,
                          didDelete: obj.didDelete
                      };
                  };
              };
          };
      };
  };
  var on = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (name) {
              return function (h) {
                  return function (obj) {
                      return {
                          tag: obj.tag,
                          props: obj.props,
                          handlers: Foreign_Object.insert(name)(h)(obj.handlers),
                          children: obj.children,
                          didCreate: obj.didCreate,
                          didUpdate: obj.didUpdate,
                          didDelete: obj.didDelete
                      };
                  };
              };
          };
      };
  };
  var kids = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (children) {
              return function (v) {
                  return {
                      tag: v.tag,
                      props: v.props,
                      handlers: v.handlers,
                      children: children,
                      didCreate: v.didCreate,
                      didUpdate: v.didUpdate,
                      didDelete: v.didDelete
                  };
              };
          };
      };
  };
  var keyed = function (key) {
      return function (v) {
          return new Freedom_VNode.VNode(key, v.value1);
      };
  };
  var el = function (dictFunctor) {
      var $32 = Freedom_VNode.VNode.create("");
      return function ($33) {
          return $32(Freedom_VNode.Element.create($33));
      };
  };
  var didUpdate = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (h) {
              return function (v) {
                  return {
                      tag: v.tag,
                      props: v.props,
                      handlers: v.handlers,
                      children: v.children,
                      didCreate: v.didCreate,
                      didUpdate: h,
                      didDelete: v.didDelete
                  };
              };
          };
      };
  };
  var didDelete = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (h) {
              return function (v) {
                  return {
                      tag: v.tag,
                      props: v.props,
                      handlers: v.handlers,
                      children: v.children,
                      didCreate: v.didCreate,
                      didUpdate: v.didUpdate,
                      didDelete: h
                  };
              };
          };
      };
  };
  var didCreate = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (h) {
              return function (v) {
                  return {
                      tag: v.tag,
                      props: v.props,
                      handlers: v.handlers,
                      children: v.children,
                      didCreate: h,
                      didUpdate: v.didUpdate,
                      didDelete: v.didDelete
                  };
              };
          };
      };
  };
  exports["t"] = t;
  exports["el"] = el;
  exports["keyed"] = keyed;
  exports["tag"] = tag;
  exports["kids"] = kids;
  exports["prop"] = prop;
  exports["on"] = on;
  exports["didCreate"] = didCreate;
  exports["didUpdate"] = didUpdate;
  exports["didDelete"] = didDelete;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Markup.Handler"] = $PS["Freedom.Markup.Handler"] || {};
  var exports = $PS["Freedom.Markup.Handler"];
  var Freedom_Markup_Common = $PS["Freedom.Markup.Common"];
  var onClick = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.on(dictFunctor)(dictMonadRec)("onclick");
      };
  };
  exports["onClick"] = onClick;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Markup.Prop"] = $PS["Freedom.Markup.Prop"] || {};
  var exports = $PS["Freedom.Markup.Prop"];
  var Freedom_Markup_Common = $PS["Freedom.Markup.Common"];
  var src = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.prop(dictFunctor)(dictMonadRec)("src");
      };
  };
  var href = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.prop(dictFunctor)(dictMonadRec)("href");
      };
  };
  var css = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.prop(dictFunctor)(dictMonadRec)("css");
      };
  };
  var className = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.prop(dictFunctor)(dictMonadRec)("className");
      };
  };
  var alt = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.prop(dictFunctor)(dictMonadRec)("alt");
      };
  };
  exports["css"] = css;
  exports["className"] = className;
  exports["href"] = href;
  exports["src"] = src;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.Markup.Tag"] = $PS["Freedom.Markup.Tag"] || {};
  var exports = $PS["Freedom.Markup.Tag"];
  var Freedom_Markup_Common = $PS["Freedom.Markup.Common"];
  var ul = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("ul");
      };
  };
  var p = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("p");
      };
  };
  var main_ = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("main");
      };
  };
  var li = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("li");
      };
  };
  var img = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("img");
      };
  };
  var header = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("header");
      };
  };
  var h3 = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("h3");
      };
  };
  var h2 = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("h2");
      };
  };
  var h1 = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("h1");
      };
  };
  var div = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("div");
      };
  };
  var a = function (dictFunctor) {
      return function (dictMonadRec) {
          return Freedom_Markup_Common.tag(dictFunctor)(dictMonadRec)("a");
      };
  };
  exports["h1"] = h1;
  exports["h2"] = h2;
  exports["h3"] = h3;
  exports["div"] = div;
  exports["p"] = p;
  exports["a"] = a;
  exports["ul"] = ul;
  exports["li"] = li;
  exports["img"] = img;
  exports["header"] = header;
  exports["main_"] = main_;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Freedom.TransformF.Simple"] = $PS["Freedom.TransformF.Simple"] || {};
  var exports = $PS["Freedom.TransformF.Simple"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Free_Trans = $PS["Control.Monad.Free.Trans"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];                
  var Select = (function () {
      function Select(value0) {
          this.value0 = value0;
      };
      Select.create = function (value0) {
          return new Select(value0);
      };
      return Select;
  })();
  var Reduce = (function () {
      function Reduce(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Reduce.create = function (value0) {
          return function (value1) {
              return new Reduce(value0, value1);
          };
      };
      return Reduce;
  })();
  var transformF = function (query) {
      return function (v) {
          if (v instanceof Select) {
              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(v.value0)(query.select));
          };
          if (v instanceof Reduce) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(query.reduce(v.value0)))(function () {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value1);
              });
          };
          throw new Error("Failed pattern match at Freedom.TransformF.Simple (line 27, column 1 - line 27, column 68): " + [ query.constructor.name, v.constructor.name ]);
      };
  };
  var functorVQuery = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Select) {
              return new Select(Data_Functor.map(Data_Functor.functorFn)(f)(m.value0));
          };
          if (m instanceof Reduce) {
              return new Reduce(m.value0, f(m.value1));
          };
          throw new Error("Failed pattern match at Freedom.TransformF.Simple (line 16, column 1 - line 16, column 57): " + [ m.constructor.name ]);
      };
  });
  var reduce = function (dictMonad) {
      return function (f) {
          return Control_Monad_Free_Trans.liftFreeT(functorVQuery)(dictMonad)(new Reduce(f, Data_Unit.unit));
      };
  };
  var select = function (dictMonad) {
      return Control_Monad_Free_Trans.liftFreeT(functorVQuery)(dictMonad)(new Select(Control_Category.identity(Control_Category.categoryFn)));
  };
  exports["Select"] = Select;
  exports["Reduce"] = Reduce;
  exports["select"] = select;
  exports["reduce"] = reduce;
  exports["transformF"] = transformF;
  exports["functorVQuery"] = functorVQuery;
})(PS);
(function($PS) {
  // Generated by purs version 0.13.2
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Freedom = $PS["Freedom"];
  var Freedom_Markup_Common = $PS["Freedom.Markup.Common"];
  var Freedom_Markup_Handler = $PS["Freedom.Markup.Handler"];
  var Freedom_Markup_Prop = $PS["Freedom.Markup.Prop"];
  var Freedom_Markup_Tag = $PS["Freedom.Markup.Tag"];
  var Freedom_TransformF_Simple = $PS["Freedom.TransformF.Simple"];                
  var Info = (function () {
      function Info() {

      };
      Info.value = new Info();
      return Info;
  })();
  var Work = (function () {
      function Work() {

      };
      Work.value = new Work();
      return Work;
  })();
  var work = Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u696d\u52d9") ])(Freedom_Markup_Tag.h2(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u4ee5\u4e0b\u306f\u30d5\u30ea\u30fc\u30e9\u30f3\u30b9\u3068\u3057\u3066\u306e\u696d\u52d9\u306e\u4f8b\u3067\u3059\u3002") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u74b0\u5883\u306e\u30e2\u30c0\u30f3\u5316") ])(Freedom_Markup_Tag.li(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("React/Redux\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u9ad8\u901f\u306a\u958b\u767a\u3092\u53ef\u80fd\u3068\u3059\u308b\u57fa\u76e4\u5b9f\u88c5") ])(Freedom_Markup_Tag.li(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30c7\u30fc\u30bf\u5206\u6790\u57fa\u76e4\u306e\u69cb\u7bc9") ])(Freedom_Markup_Tag.li(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30c9\u30e1\u30a4\u30f3\u3084\u30b7\u30b9\u30c6\u30e0\u306e\u90fd\u5408\u4e0a\u624b\u3092\u51fa\u3057\u306b\u304f\u3044\u3001\u8ca0\u50b5\u306b\u306a\u3063\u3066\u3044\u308b\u30c6\u30fc\u30d6\u30eb\u7fa4\u306e\u5168\u9762\u7684\u306a\u518d\u8a2d\u8a08\u3068\u5b9f\u88c5\u3068\u30c7\u30fc\u30bf\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3") ])(Freedom_Markup_Tag.li(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("AWS\u304b\u3089GCP\u3078\u306e\u30a4\u30f3\u30d5\u30e9\u79fb\u884c(\u4e3b\u306bGCP\u5074\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4fee\u6b63\u3001\u79fb\u884c\u4f5c\u696d)") ])(Freedom_Markup_Tag.li(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u8ca0\u50b5\u306e\u6e9c\u307e\u3063\u305f\u6c7a\u6e08\u57fa\u76e4\u306e\u5168\u9762\u7684\u306a\u518d\u8a2d\u8a08\u3068\u5b9f\u88c5") ])(Freedom_Markup_Tag.li(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u5404\u7a2e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0") ])(Freedom_Markup_Tag.li(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u6a5f\u68b0\u5b66\u7fd2\u3092\u7528\u3044\u305f\u81ea\u7136\u8a00\u8a9e\u5206\u91ce\u306b\u304a\u3051\u308b\u5206\u985e\u5668\u306e\u4f5c\u6210\u3068\u305d\u308c\u3092\u7528\u3044\u305f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3084\u30a4\u30f3\u30d5\u30e9\u306e\u69cb\u7bc9") ])(Freedom_Markup_Tag.li(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u3056\u3063\u304f\u308a\u8981\u671b\u3092\u3082\u3089\u3063\u3066\u3001\u4e00\u4eba\u3067\u30b5\u30fc\u30d3\u30b9\u3092\u30ea\u30ea\u30fc\u30b9") ])(Freedom_Markup_Tag.li(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))) ])(Freedom_Markup_Tag.ul(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u306a\u3069\u3001\u591a\u7fa9\u306b\u6e21\u308a\u307e\u3059\u3002") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u6280\u8853\u7684\u8ab2\u984c\u306e\u30bf\u30b9\u30af\u306f\u7279\u6027\u4e0a\u30bd\u30ed\u3042\u308b\u3044\u306f\u307b\u307c\u30bd\u30ed\u3067\u3042\u305f\u308b\u3088\u3046\u306a\u696d\u52d9\u304c\u591a\u3081\u3067\u3059\u304c\u3001\u8907\u6570\u4eba\u3067\u306e\u901a\u5e38\u306e\u6a5f\u80fd\u958b\u767a\u3082\u3084\u308a\u307e\u3059\u3002") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u4ed5\u4e8b\u306e\u3054\u4f9d\u983c") ])(Freedom_Markup_Tag.h2(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("Twitter\u306eDM\u306b\u3066\u53d7\u3051\u4ed8\u3051\u3066\u304a\u308a\u307e\u3059\u3002") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))) ])(Freedom_Markup_Tag.div(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)));
  var wholeCSS = "\x0a  body {\x0a    margin: 0;\x0a    font-family: 'Montserrat', 'M PLUS Rounded 1c', sans-serif;\x0a    color: #111111;\x0a    background-color: #fcfcfc;\x0a  }\x0a  p, li {\x0a    color: #333333;\x0a  }\x0a  a {\x0a    cursor: pointer;\x0a    text-decoration: none;\x0a  }\x0a  .& {\x0a    width: 720px;\x0a    margin: 64px auto;\x0a  }\x0a  ";
  var topCSS = "\x0a  .& {\x0a    padding: 0 160px;\x0a    display: flex;\x0a    align-items: center;\x0a    justify-content: space-between;\x0a    margin-bottom: 64px;\x0a  }\x0a  ";
  var socialImgCSS = "\x0a  .& {\x0a    width: 100%;\x0a    height: 100%;\x0a  }\x0a  ";
  var socialContainerCSS = "\x0a  .& {\x0a    display: flex;\x0a    align-items: center;\x0a    justify-content: space-between;\x0a  }\x0a  ";
  var socialCSS = "\x0a  .& {\x0a    display: flex;\x0a    justify-content: center;\x0a    align-items: center;\x0a    width: 48px;\x0a    height: 48px;\x0a    border-radius: 50%;\x0a    overflow: hidden;\x0a  }\x0a  ";
  var middleCSS = "\x0a  .& {\x0a    text-align: center;\x0a  }\x0a  ";
  var linkCSS = "\x0a  .& {\x0a    font-size: 24px;\x0a    margin-right: 16px;\x0a  }\x0a  .&:hover {\x0a    font-weight: bold;\x0a  }\x0a  .&.active {\x0a    pointer-events: none;\x0a    font-weight: bold;\x0a  }\x0a  .&:last-of-type {\x0a    margin-right: 0;\x0a  }\x0a  ";
  var info = Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u6240\u5c5e") ])(Freedom_Markup_Tag.h2(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30d5\u30ea\u30fc\u30e9\u30f3\u30b9") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u8077\u7a2e") ])(Freedom_Markup_Tag.h2(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("Web\u30a8\u30f3\u30b8\u30cb\u30a2") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30b9\u30ad\u30eb") ])(Freedom_Markup_Tag.h2(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u304b\u3089\u30a4\u30f3\u30d5\u30e9\u307e\u3067\u3084\u308a\u307e\u3059\u3002") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3001\u3068\u308a\u308f\u3051SPA\u306b\u3064\u3044\u3066\u306f2012\u5e74\u304b\u3089\u306e\u9577\u3044\u7d4c\u9a13\u304c\u3042\u308a\u5f97\u610f\u3068\u3057\u3066\u3044\u307e\u3059\u3002") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u4ed5\u4e8b\u4e0a\u3067\u306f\u4e3b\u306bRuby, Go, JavaScript, TypeScript, Flow\u3092\u4f7f\u3046\u6a5f\u4f1a\u304c\u591a\u3044\u3067\u3059\u3002") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u3067\u306f\u3001PureScript\u3092\u6700\u3082\u597d\u3093\u3067\u304a\u308a\u3001") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30b5\u30fc\u30d0\u30fc\u5411\u3051\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3084\u3001\u4eee\u60f3DOM\u306a\u3069\u591a\u6570\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u3064\u304f\u3063\u3066\u3044\u307e\u3059\u3002") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30a4\u30f3\u30d5\u30e9\u306b\u3064\u3044\u3066\u306f\u6700\u8fd1\u306f\u3082\u3063\u3071\u3089GCP\u3068\u308a\u308f\u3051GKE\u3092\u4f7f\u3044\u307e\u3059\u3002") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))) ])(Freedom_Markup_Tag.div(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)));
  var hatenaCSS = "\x0a  .& {\x0a    width: 150%;\x0a    height: 150%;\x0a  }\x0a  ";
  var h1CSS = "\x0a  .& {\x0a    font-weight: normal;\x0a    text-align: center;\x0a    margin: 0 0 64px;\x0a  }\x0a  ";
  var eqTab = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Info && y instanceof Info) {
              return true;
          };
          if (x instanceof Work && y instanceof Work) {
              return true;
          };
          return false;
      };
  });
  var avatarImgCSS = "\x0a  .& {\x0a    width: 100%;\x0a  }\x0a  ";
  var avatarCSS = "\x0a  .& {\x0a    display: flex;\x0a    justify-content: center;\x0a    align-items: center;\x0a    width: 128px;\x0a    height: 128px;\x0a    border-radius: 8px;\x0a    overflow: hidden;\x0a  }\x0a  ";
  var view = function (state) {
      return Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("oreshinya.github.io") ])(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(h1CSS)(Freedom_Markup_Tag.h1(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Prop.alt(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("Profile")(Freedom_Markup_Prop.src(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("assets/profile.jpg")(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(avatarImgCSS)(Freedom_Markup_Tag.img(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))))) ])(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(avatarCSS)(Freedom_Markup_Tag.div(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("ID") ])(Freedom_Markup_Tag.h3(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("oreshinya") ])(Freedom_Markup_Tag.p(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30bd\u30fc\u30b7\u30e3\u30eb\u30a2\u30ab\u30a6\u30f3\u30c8") ])(Freedom_Markup_Tag.h3(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Prop.alt(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("Twitter")(Freedom_Markup_Prop.src(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("assets/twitter.svg")(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(socialImgCSS)(Freedom_Markup_Tag.img(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))))) ])(Freedom_Markup_Prop.href(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("https://twitter.com/oreshinya")(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(socialCSS)(Freedom_Markup_Tag.a(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Prop.alt(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("Github")(Freedom_Markup_Prop.src(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("assets/github.svg")(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(socialImgCSS)(Freedom_Markup_Tag.img(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))))) ])(Freedom_Markup_Prop.href(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("https://github.com/oreshinya")(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(socialCSS)(Freedom_Markup_Tag.a(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Prop.alt(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("Hatena")(Freedom_Markup_Prop.src(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("assets/hatena.svg")(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(hatenaCSS)(Freedom_Markup_Tag.img(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))))) ])(Freedom_Markup_Prop.href(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)("https://oreshinya.hatenablog.com")(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(socialCSS)(Freedom_Markup_Tag.a(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))))) ])(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(socialContainerCSS)(Freedom_Markup_Tag.div(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)))) ])(Freedom_Markup_Tag.div(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))) ])(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(topCSS)(Freedom_Markup_Tag.div(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u30a4\u30f3\u30d5\u30a9\u30e1\u30fc\u30b7\u30e7\u30f3") ])(Freedom_Markup_Handler.onClick(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(Data_Function["const"](Freedom_TransformF_Simple.reduce(Effect_Aff.monadAff)(Data_Function["const"](Info.value))))(Freedom_Markup_Prop.className(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)((function () {
          var $4 = Data_Eq.eq(eqTab)(state)(Info.value);
          if ($4) {
              return "active";
          };
          return "";
      })())(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(linkCSS)(Freedom_Markup_Tag.a(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)))))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ Freedom_Markup_Common.t("\u696d\u52d9\u306b\u3064\u3044\u3066") ])(Freedom_Markup_Handler.onClick(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(Data_Function["const"](Freedom_TransformF_Simple.reduce(Effect_Aff.monadAff)(Data_Function["const"](Work.value))))(Freedom_Markup_Prop.className(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)((function () {
          var $5 = Data_Eq.eq(eqTab)(state)(Work.value);
          if ($5) {
              return "active";
          };
          return "";
      })())(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(linkCSS)(Freedom_Markup_Tag.a(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)))))) ])(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(middleCSS)(Freedom_Markup_Tag.div(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)))) ])(Freedom_Markup_Tag.header(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))), Freedom_Markup_Common.el(Freedom_TransformF_Simple.functorVQuery)(Freedom_Markup_Common.kids(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)([ (function () {
          if (state instanceof Info) {
              return Freedom_Markup_Common.keyed("info")(info);
          };
          if (state instanceof Work) {
              return Freedom_Markup_Common.keyed("work")(work);
          };
          throw new Error("Failed pattern match at Main (line 70, column 9 - line 72, column 38): " + [ state.constructor.name ]);
      })() ])(Freedom_Markup_Tag.main_(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))) ])(Freedom_Markup_Prop.css(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff)(wholeCSS)(Freedom_Markup_Tag.div(Freedom_TransformF_Simple.functorVQuery)(Effect_Aff.monadRecAff))));
  };
  var main = Freedom.run(Freedom_TransformF_Simple.functorVQuery)({
      selector: "#app",
      initialState: Info.value,
      subscriptions: [  ],
      transformF: Freedom_TransformF_Simple.transformF,
      view: view
  });
  exports["Info"] = Info;
  exports["Work"] = Work;
  exports["main"] = main;
  exports["view"] = view;
  exports["info"] = info;
  exports["work"] = work;
  exports["wholeCSS"] = wholeCSS;
  exports["h1CSS"] = h1CSS;
  exports["topCSS"] = topCSS;
  exports["avatarCSS"] = avatarCSS;
  exports["avatarImgCSS"] = avatarImgCSS;
  exports["socialContainerCSS"] = socialContainerCSS;
  exports["socialCSS"] = socialCSS;
  exports["socialImgCSS"] = socialImgCSS;
  exports["hatenaCSS"] = hatenaCSS;
  exports["middleCSS"] = middleCSS;
  exports["linkCSS"] = linkCSS;
  exports["eqTab"] = eqTab;
})(PS);
PS["Main"].main();